"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
"""

import streamlit as st
import hashlib
import sqlite3
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class AuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, db_manager):
        self.db = db_manager
        self.session_timeout_minutes = 30
    
    def hash_password(self, password: str) -> str:
        """
        –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        
        Args:
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        """
        return hashlib.sha256(password.encode()).hexdigest()
    
    def verify_password(self, password: str, hashed_password: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        
        Args:
            password: –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            hashed_password: –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ë–î
            
        Returns:
            True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
        """
        return self.hash_password(password) == hashed_password
    
    def authenticate_user(self, username: str, password: str) -> Optional[Dict[str, Any]]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        query = """
            SELECT id, username, password_hash, full_name, role, is_active
            FROM users 
            WHERE username = ? AND is_active = 1
        """
        
        result = self.db.execute_query(query, (username,))
        
        if not result:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username}")
            return None
        
        user = result[0]
        
        if self.verify_password(password, user['password_hash']):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            self.update_last_login(user['id'])
            
            user_data = {
                'id': user['id'],
                'username': user['username'],
                'full_name': user['full_name'],
                'role': user['role'],
                'login_time': datetime.now()
            }
            
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            return user_data
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            return None
    
    def update_last_login(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"""
        query = "UPDATE users SET last_login = ? WHERE id = ?"
        self.db.execute_query(query, (datetime.now().isoformat(), user_id), fetch=False)
    
    def create_user(
        self,
        username: str,
        password: str,
        full_name: str,
        role: str = 'operator'
    ) -> Optional[int]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing = self.db.execute_query(
            "SELECT 1 FROM users WHERE username = ?",
            (username,)
        )
        
        if existing:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password_hash = self.hash_password(password)
        
        query = """
            INSERT INTO users (username, password_hash, full_name, role)
            VALUES (?, ?, ?, ?)
        """
        
        user_id = self.db.execute_query(
            query,
            (username, password_hash, full_name, role),
            fetch=False
        )
        
        if user_id:
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({role})")
        
        return user_id
    
    def change_password(self, user_id: int, new_password: str) -> bool:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_password: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        password_hash = self.hash_password(new_password)
        
        query = "UPDATE users SET password_hash = ? WHERE id = ?"
        result = self.db.execute_query(query, (password_hash, user_id), fetch=False)
        
        if result is not None:
            logger.info(f"–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
            return True
        
        return False
    
    def get_user_permissions(self, role: str) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–æ–ª–∏
        
        Args:
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        """
        from config.settings import USER_ROLES
        
        role_config = USER_ROLES.get(role, {})
        return role_config.get('permissions', [])
    
    def check_permission(self, user_role: str, required_permission: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            required_permission: –¢—Ä–µ–±—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
        """
        permissions = self.get_user_permissions(user_role)
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
        if 'all' in permissions:
            return True
        
        return required_permission in permissions


def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if 'user' not in st.session_state:
        st.session_state.user = None
    
    if 'login_time' not in st.session_state:
        st.session_state.login_time = None


def check_session_timeout() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Å—Å–∏–∏
    
    Returns:
        True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
    """
    if not st.session_state.authenticated or not st.session_state.login_time:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
    session_duration = datetime.now() - st.session_state.login_time
    max_duration = timedelta(minutes=30)  # 30 –º–∏–Ω—É—Ç
    
    if session_duration > max_duration:
        # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
        logout()
        return False
    
    return True


def check_authentication() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    """
    init_session_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏
    if not check_session_timeout():
        return False
    
    if not st.session_state.authenticated:
        show_login_form()
        return False
    
    return True


def show_login_form():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞"""
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    st.markdown("""
    <style>
        .login-container {
            max-width: 400px;
            margin: 0 auto;
            padding: 2rem;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .login-header {
            text-align: center;
            color: #1e3c72;
            margin-bottom: 2rem;
        }
        .login-info {
            background: #e3f2fd;
            padding: 1rem;
            border-radius: 5px;
            margin-top: 1rem;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="login-header">
        <h1>üèõÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ö–∞–ª–ª–∏</h1>
        <h3>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        with st.container():
            st.markdown('<div class="login-container">', unsafe_allow_html=True)
            
            with st.form("login_form", clear_on_submit=False):
                st.markdown("### –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                
                username = st.text_input(
                    "üë§ –õ–æ–≥–∏–Ω",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω",
                    help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
                )
                
                password = st.text_input(
                    "üîí –ü–∞—Ä–æ–ª—å", 
                    type="password",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å",
                    help="–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
                )
                
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    login_button = st.form_submit_button(
                        "üöÄ –í–æ–π—Ç–∏",
                        use_container_width=True,
                        type="primary"
                    )
                
                with col_btn2:
                    demo_button = st.form_submit_button(
                        "üëÅÔ∏è –î–µ–º–æ –¥–æ—Å—Ç—É–ø",
                        use_container_width=True
                    )
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
                if login_button or demo_button:
                    if demo_button:
                        # –î–µ–º–æ –¥–æ—Å—Ç—É–ø —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        username = "admin"
                        password = "mahalla2024"
                    
                    if username and password:
                        success = login(username, password)
                        if success:
                            st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
                            st.rerun()
                        else:
                            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                    else:
                        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
            with st.expander("üí° –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞"):
                st.markdown("""
                <div class="login-info">
                    <strong>–î–µ–º–æ –¥–æ—Å—Ç—É–ø:</strong><br>
                    üîë –õ–æ–≥–∏–Ω: <code>admin</code><br>
                    üîë –ü–∞—Ä–æ–ª—å: <code>mahalla2024</code><br><br>
                    
                    <em>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–µ–º–æ –¥–æ—Å—Ç—É–ø"</em>
                </div>
                """, unsafe_allow_html=True)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            st.markdown("""
            ---
            ### üìã –û —Å–∏—Å—Ç–µ–º–µ
            
            **–§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:**
            - üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∞–º–∏ –º–∞—Ö–∞–ª–ª–∏
            - üèõÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏–π
            - üì± SMS-—Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            - ‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            - ‚≠ê –°–∏—Å—Ç–µ–º–∞ –ø–æ–æ—â—Ä–µ–Ω–∏–π
            - üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            
            **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
            - üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
            - üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
            - üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            - üîí –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            """)


def login(username: str, password: str) -> bool:
    """
    –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        
    Returns:
        True –µ—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω
    """
    from config.database import DatabaseManager
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = DatabaseManager()
        auth_manager = AuthManager(db)
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        user_data = auth_manager.authenticate_user(username, password)
        
        if user_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            st.session_state.authenticated = True
            st.session_state.user = user_data
            st.session_state.login_time = datetime.now()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            return True
        else:
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ")
        return False


def logout():
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if st.session_state.get('user'):
        username = st.session_state.user.get('username', 'unknown')
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    st.session_state.authenticated = False
    st.session_state.user = None
    st.session_state.login_time = None
    
    # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    keys_to_clear = [key for key in st.session_state.keys() 
                     if key not in ['authenticated', 'user', 'login_time']]
    
    for key in keys_to_clear:
        del st.session_state[key]


def get_current_user() -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    return st.session_state.get('user')


def get_current_user_id() -> Optional[int]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    user = get_current_user()
    return user['id'] if user else None


def get_current_user_role() -> Optional[str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    user = get_current_user()
    return user['role'] if user else None


def has_permission(permission: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        permission: –¢—Ä–µ–±—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        
    Returns:
        True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
    """
    user_role = get_current_user_role()
    
    if not user_role:
        return False
    
    from config.database import DatabaseManager
    db = DatabaseManager()
    auth_manager = AuthManager(db)
    
    return auth_manager.check_permission(user_role, permission)


def require_permission(permission: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    
    Args:
        permission: –¢—Ä–µ–±—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    """
    if not has_permission(permission):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        st.stop()


def show_user_info():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = get_current_user()
    
    if user:
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        st.sidebar.write(f"**{user['full_name']}**")
        st.sidebar.write(f"–†–æ–ª—å: {user['role']}")
        
        # –í—Ä–µ–º—è –≤—Ö–æ–¥–∞
        if st.session_state.login_time:
            login_duration = datetime.now() - st.session_state.login_time
            hours, remainder = divmod(login_duration.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            st.sidebar.write(f"–í —Å–∏—Å—Ç–µ–º–µ: {hours}—á {minutes}–º")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.sidebar.button("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
            logout()
            st.rerun()


def session_timeout_warning():
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏"""
    if not st.session_state.authenticated or not st.session_state.login_time:
        return
    
    session_duration = datetime.now() - st.session_state.login_time
    max_duration = timedelta(minutes=30)
    remaining = max_duration - session_duration
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if remaining.total_seconds() <= 300 and remaining.total_seconds() > 0:
        minutes_left = int(remaining.total_seconds() // 60)
        st.warning(f"‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")


def extend_session():
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    if st.session_state.authenticated:
        st.session_state.login_time = datetime.now()


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def auto_extend_session():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if st.session_state.authenticated:
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        extend_session()