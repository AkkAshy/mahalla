"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ö–∞–ª–ª–∏
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import Any, Dict, List, Optional, Union
from datetime import datetime, date, timedelta
import re
import logging
import io
import base64

logger = logging.getLogger(__name__)

# ============== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ==============

def format_phone(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    """
    if not phone:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    clean_phone = re.sub(r'[^\d\+]', '', phone)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +998 (XX) XXX-XX-XX
    if clean_phone.startswith('+998') and len(clean_phone) == 13:
        return f"{clean_phone[:4]} ({clean_phone[4:6]}) {clean_phone[6:9]}-{clean_phone[9:11]}-{clean_phone[11:]}"
    elif clean_phone.startswith('998') and len(clean_phone) == 12:
        return f"+{clean_phone[:3]} ({clean_phone[3:5]}) {clean_phone[5:8]}-{clean_phone[8:10]}-{clean_phone[10:]}"
    
    return phone


def format_date(date_value: Union[str, date, datetime], format_type: str = "short") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    
    Args:
        date_value: –î–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        format_type: –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (short, long, relative)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    """
    if not date_value:
        return ""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –æ–±—ä–µ–∫—Ç—É date
    if isinstance(date_value, str):
        try:
            date_obj = datetime.strptime(date_value, '%Y-%m-%d').date()
        except ValueError:
            try:
                date_obj = datetime.strptime(date_value, '%Y-%m-%d %H:%M:%S').date()
            except ValueError:
                return str(date_value)
    elif isinstance(date_value, datetime):
        date_obj = date_value.date()
    else:
        date_obj = date_value
    
    if format_type == "short":
        return date_obj.strftime("%d.%m.%Y")
    elif format_type == "long":
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        return f"{date_obj.day} {months[date_obj.month - 1]} {date_obj.year} –≥."
    elif format_type == "relative":
        today = date.today()
        diff = (today - date_obj).days
        
        if diff == 0:
            return "–°–µ–≥–æ–¥–Ω—è"
        elif diff == 1:
            return "–í—á–µ—Ä–∞"
        elif diff == -1:
            return "–ó–∞–≤—Ç—Ä–∞"
        elif -7 <= diff <= 7:
            days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            return days[date_obj.weekday()]
        else:
            return format_date(date_value, "short")
    
    return str(date_obj)


def format_datetime(datetime_value: Union[str, datetime], format_type: str = "short") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        datetime_value: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        format_type: –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    """
    if not datetime_value:
        return ""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –æ–±—ä–µ–∫—Ç—É datetime
    if isinstance(datetime_value, str):
        try:
            dt_obj = datetime.fromisoformat(datetime_value.replace('Z', '+00:00'))
        except ValueError:
            try:
                dt_obj = datetime.strptime(datetime_value, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                return str(datetime_value)
    else:
        dt_obj = datetime_value
    
    if format_type == "short":
        return dt_obj.strftime("%d.%m.%Y %H:%M")
    elif format_type == "long":
        return dt_obj.strftime("%d %B %Y –≥. –≤ %H:%M")
    elif format_type == "time_only":
        return dt_obj.strftime("%H:%M")
    
    return str(dt_obj)


def format_currency(amount: float, currency: str = "—Å—É–º") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã
    
    Args:
        amount: –°—É–º–º–∞
        currency: –í–∞–ª—é—Ç–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
    """
    if amount is None:
        return "0"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    formatted = f"{amount:,.0f}".replace(",", " ")
    return f"{formatted} {currency}"


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    
    Args:
        size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    """
    if size_bytes == 0:
        return "0 –ë"
    
    units = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë"]
    unit_index = 0
    size = float(size_bytes)
    
    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1
    
    return f"{size:.1f} {units[unit_index]}"


# ============== –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò ==============

def safe_get(data: Dict[str, Any], key: str, default: Any = None) -> Any:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    
    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        key: –ö–ª—é—á
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ default
    """
    return data.get(key, default) if data else default


def clean_dict(data: Dict[str, Any], remove_none: bool = True, remove_empty: bool = True) -> Dict[str, Any]:
    """
    –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    Args:
        data: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        remove_none: –£–¥–∞–ª—è—Ç—å None –∑–Ω–∞—á–µ–Ω–∏—è
        remove_empty: –£–¥–∞–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    """
    cleaned = {}
    
    for key, value in data.items():
        if remove_none and value is None:
            continue
        if remove_empty and isinstance(value, str) and not value.strip():
            continue
        
        cleaned[key] = value
    
    return cleaned


def merge_dicts(*dicts: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π
    
    Args:
        *dicts: –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        
    Returns:
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    """
    result = {}
    for d in dicts:
        if d:
            result.update(d)
    return result


def group_by_key(items: List[Dict[str, Any]], key: str) -> Dict[str, List[Dict[str, Any]]]:
    """
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ –∫–ª—é—á—É
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        key: –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    groups = {}
    
    for item in items:
        group_key = item.get(key)
        if group_key not in groups:
            groups[group_key] = []
        groups[group_key].append(item)
    
    return groups


# ============== STREAMLIT –•–ï–õ–ü–ï–†–´ ==============

def show_success_message(message: str, duration: int = 3):
    """
    –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ (—Å–µ–∫—É–Ω–¥—ã)
    """
    placeholder = st.empty()
    placeholder.success(f"‚úÖ {message}")
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    # –Ω–æ –≤ streamlit —ç—Ç–æ —Å–ª–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏


def show_error_message(message: str, details: Optional[str] = None):
    """
    –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        details: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
    """
    st.error(f"‚ùå {message}")
    
    if details:
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
            st.code(details)


def show_info_message(message: str, icon: str = "üí°"):
    """
    –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        icon: –ò–∫–æ–Ω–∫–∞
    """
    st.info(f"{icon} {message}")


def create_download_link(data: Union[str, bytes], filename: str, mime_type: str = "text/plain") -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        mime_type: MIME —Ç–∏–ø
        
    Returns:
        HTML —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    if isinstance(data, str):
        data = data.encode()
    
    b64_data = base64.b64encode(data).decode()
    
    return f'''
    <a href="data:{mime_type};base64,{b64_data}" download="{filename}">
        üì• –°–∫–∞—á–∞—Ç—å {filename}
    </a>
    '''


def create_metrics_row(metrics: List[Dict[str, Any]], columns_count: int = 4):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç—Ä–∏–∫
    
    Args:
        metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
        columns_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
    """
    cols = st.columns(columns_count)
    
    for i, metric in enumerate(metrics):
        col_index = i % columns_count
        
        with cols[col_index]:
            st.metric(
                label=metric.get('label', ''),
                value=metric.get('value', 0),
                delta=metric.get('delta'),
                help=metric.get('help')
            )


def create_status_badge(status: str, status_config: Dict[str, Dict[str, str]]) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ –±–µ–π–¥–∂–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    
    Args:
        status: –°—Ç–∞—Ç—É—Å
        status_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        
    Returns:
        HTML –±–µ–π–¥–∂
    """
    config = status_config.get(status, {'color': 'gray', 'text': status})
    
    return f'''
    <span style="
        background-color: {config['color']};
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
    ">
        {config['text']}
    </span>
    '''


# ============== –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò ==============

def save_uploaded_file(uploaded_file, upload_dir: str = "uploads") -> Optional[str]:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Args:
        uploaded_file: –§–∞–π–ª –∏–∑ Streamlit
        upload_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
    """
    import os
    from pathlib import Path
    
    if not uploaded_file:
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path(upload_dir).mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{uploaded_file.name}"
        filepath = os.path.join(upload_dir, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filepath, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None


def export_dataframe_to_excel(df: pd.DataFrame, sheet_name: str = "–î–∞–Ω–Ω—ã–µ") -> bytes:
    """
    –≠–∫—Å–ø–æ—Ä—Ç DataFrame –≤ Excel
    
    Args:
        df: DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        
    Returns:
        –ë–∞–π—Ç—ã Excel —Ñ–∞–π–ª–∞
    """
    output = io.BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)
    
    return output.getvalue()


# ============== –ì–†–ê–§–ò–ö–ò –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ==============

def create_pie_chart(data: Dict[str, int], title: str = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ") -> go.Figure:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
        
    Returns:
        –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ Plotly
    """
    fig = px.pie(
        values=list(data.values()),
        names=list(data.keys()),
        title=title
    )
    
    fig.update_traces(
        textposition='inside',
        textinfo='percent+label',
        hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
    )
    
    return fig


def create_bar_chart(data: Dict[str, int], title: str = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", orientation: str = "v") -> go.Figure:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
        orientation: –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (v - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è, h - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è)
        
    Returns:
        –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ Plotly
    """
    if orientation == "h":
        fig = px.bar(
            x=list(data.values()),
            y=list(data.keys()),
            orientation='h',
            title=title
        )
    else:
        fig = px.bar(
            x=list(data.keys()),
            y=list(data.values()),
            title=title
        )
    
    fig.update_layout(
        showlegend=False,
        hovermode='x unified'
    )
    
    return fig


def create_line_chart(dates: List[date], values: List[float], title: str = "–î–∏–Ω–∞–º–∏–∫–∞") -> go.Figure:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    
    Args:
        dates: –°–ø–∏—Å–æ–∫ –¥–∞—Ç
        values: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
        
    Returns:
        –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ Plotly
    """
    fig = px.line(
        x=dates,
        y=values,
        title=title,
        markers=True
    )
    
    fig.update_layout(
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
        hovermode='x unified'
    )
    
    return fig


def create_gauge_chart(value: float, title: str = "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", max_value: float = 100) -> go.Figure:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    
    Args:
        value: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
        max_value: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ Plotly
    """
    fig = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=value,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': title},
        delta={'reference': max_value * 0.7},  # –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        gauge={
            'axis': {'range': [None, max_value]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, max_value * 0.5], 'color': "lightgray"},
                {'range': [max_value * 0.5, max_value * 0.8], 'color': "gray"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': max_value * 0.9
            }
        }
    ))
    
    return fig


# ============== –ü–ê–ì–ò–ù–ê–¶–ò–Ø ==============

class Paginator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, items: List[Any], items_per_page: int = 20):
        self.items = items
        self.items_per_page = items_per_page
        self.total_items = len(items)
        self.total_pages = (self.total_items + items_per_page - 1) // items_per_page
    
    def get_page(self, page_number: int) -> List[Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        if page_number < 1 or page_number > self.total_pages:
            return []
        
        start_index = (page_number - 1) * self.items_per_page
        end_index = start_index + self.items_per_page
        
        return self.items[start_index:end_index]
    
    def show_pagination_controls(self, key: str = "pagination") -> int:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            key: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            
        Returns:
            –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        if self.total_pages <= 1:
            return 1
        
        col1, col2, col3, col4, col5 = st.columns([1, 1, 2, 1, 1])
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if f"{key}_current_page" not in st.session_state:
            st.session_state[f"{key}_current_page"] = 1
        
        current_page = st.session_state[f"{key}_current_page"]
        
        with col1:
            if st.button("‚èÆÔ∏è –ü–µ—Ä–≤–∞—è", key=f"{key}_first", disabled=current_page == 1):
                st.session_state[f"{key}_current_page"] = 1
                st.rerun()
        
        with col2:
            if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥", key=f"{key}_prev", disabled=current_page == 1):
                st.session_state[f"{key}_current_page"] = current_page - 1
                st.rerun()
        
        with col3:
            page = st.selectbox(
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {self.total_pages}",
                range(1, self.total_pages + 1),
                index=current_page - 1,
                key=f"{key}_select"
            )
            if page != current_page:
                st.session_state[f"{key}_current_page"] = page
                st.rerun()
        
        with col4:
            if st.button("–°–ª–µ–¥ ‚û°Ô∏è", key=f"{key}_next", disabled=current_page == self.total_pages):
                st.session_state[f"{key}_current_page"] = current_page + 1
                st.rerun()
        
        with col5:
            if st.button("–ü–æ—Å–ª–µ–¥–Ω—è—è ‚è≠Ô∏è", key=f"{key}_last", disabled=current_page == self.total_pages):
                st.session_state[f"{key}_current_page"] = self.total_pages
                st.rerun()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        start_item = (current_page - 1) * self.items_per_page + 1
        end_item = min(current_page * self.items_per_page, self.total_items)
        
        st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ {start_item}-{end_item} –∏–∑ {self.total_items} –∑–∞–ø–∏—Å–µ–π")
        
        return current_page


# ============== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==============

def show_notification(message: str, type_: str = "info", duration: int = 5):
    """
    –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    Args:
        message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        type_: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, warning, info)
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞
    """
    icons = {
        "success": "‚úÖ",
        "error": "‚ùå", 
        "warning": "‚ö†Ô∏è",
        "info": "üí°"
    }
    
    icon = icons.get(type_, "üí°")
    
    if type_ == "success":
        st.success(f"{icon} {message}")
    elif type_ == "error":
        st.error(f"{icon} {message}")
    elif type_ == "warning":
        st.warning(f"{icon} {message}")
    else:
        st.info(f"{icon} {message}")


# ============== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ==============

@st.cache_data(ttl=300)  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
def cached_database_query(query: str, params: tuple = None):
    """
    –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        query: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    """
    from config.database import DatabaseManager
    
    db = DatabaseManager()
    return db.execute_query(query, params)


def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    st.cache_data.clear()
    st.cache_resource.clear()


# ============== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ==============

def export_to_csv(data: List[Dict[str, Any]], filename: str = "export.csv") -> str:
    """
    –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        CSV —Å—Ç—Ä–æ–∫–∞
    """
    if not data:
        return ""
    
    df = pd.DataFrame(data)
    return df.to_csv(index=False, encoding='utf-8')


def create_excel_download_button(data: Union[pd.DataFrame, List[Dict[str, Any]]], 
                                filename: str = "export.xlsx",
                                button_text: str = "üì• –°–∫–∞—á–∞—Ç—å Excel"):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    """
    if isinstance(data, list):
        df = pd.DataFrame(data)
    else:
        df = data
    
    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    excel_data = export_dataframe_to_excel(df)
    
    st.download_button(
        label=button_text,
        data=excel_data,
        file_name=filename,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )


# ============== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ==============

def create_search_filters(search_fields: List[str], filter_options: Dict[str, List[str]] = None) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    
    Args:
        search_fields: –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        filter_options: –û–ø—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    filters = {}
    
    # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    col1, col2 = st.columns([2, 1])
    
    with col1:
        search_term = st.text_input(
            "üîç –ü–æ–∏—Å–∫",
            placeholder=f"–ü–æ–∏—Å–∫ –ø–æ: {', '.join(search_fields)}",
            help=f"–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –ø–æ–ª—è–º: {', '.join(search_fields)}"
        )
        filters['search_term'] = search_term
    
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
            st.rerun()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    if filter_options:
        with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"):
            filter_cols = st.columns(len(filter_options))
            
            for i, (filter_name, options) in enumerate(filter_options.items()):
                with filter_cols[i]:
                    selected = st.selectbox(
                        filter_name,
                        ["–í—Å–µ"] + options,
                        key=f"filter_{filter_name}"
                    )
                    filters[filter_name] = selected if selected != "–í—Å–µ" else None
    
    return filters


# ============== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –í–†–ï–ú–ï–ù–ò ==============

def get_time_ago(date_time: Union[str, datetime]) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥")
    
    Args:
        date_time: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        
    Returns:
        –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    """
    if isinstance(date_time, str):
        try:
            dt = datetime.fromisoformat(date_time.replace('Z', '+00:00'))
        except ValueError:
            return str(date_time)
    else:
        dt = date_time
    
    now = datetime.now()
    diff = now - dt
    
    if diff.days > 0:
        return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 3600:
        hours = diff.seconds // 3600
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 60:
        minutes = diff.seconds // 60
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    else:
        return "–¢–æ–ª—å–∫–æ —á—Ç–æ"


def is_business_hours(time_obj: Union[str, datetime]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        time_obj: –í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    """
    if isinstance(time_obj, str):
        try:
            dt = datetime.strptime(time_obj, '%H:%M')
        except ValueError:
            return False
    else:
        dt = time_obj
    
    # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 8:00 - 18:00
    return 8 <= dt.hour < 18


# ============== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ==============

def sanitize_input(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    dangerous_chars = ['<', '>', '"', "'", '&', '\x00']
    
    for char in dangerous_chars:
        text = text.replace(char, '')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    return text[:1000].strip()


def mask_sensitive_data(data: str, mask_char: str = "*", visible_chars: int = 4) -> str:
    """
    –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        mask_char: –°–∏–º–≤–æ–ª –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        visible_chars: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
    Returns:
        –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    if not data or len(data) <= visible_chars:
        return data
    
    visible_part = data[-visible_chars:]
    masked_part = mask_char * (len(data) - visible_chars)
    
    return masked_part + visible_part


# ============== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==============

def log_user_action(action: str, details: str = "", user_id: Optional[int] = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        details: –î–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from utils.auth import get_current_user_id
    
    if not user_id:
        user_id = get_current_user_id()
    
    logger.info(f"User action: {action} | User ID: {user_id} | Details: {details}")


# ============== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê ==============

def apply_custom_css():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
    st.markdown("""
    <style>
        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        .main .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
        [data-testid="metric-container"] {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 4px solid #007bff;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
        .stButton > button {
            border-radius: 0.5rem;
            border: none;
            padding: 0.5rem 1rem;
            font-weight: 500;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è sidebar */
        .css-1d391kg {
            background-color: #f8f9fa;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü */
        .dataframe {
            font-size: 0.9rem;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
        .stAlert[data-baseweb="notification"] {
            border-radius: 0.5rem;
        }
    </style>
    """, unsafe_allow_html=True)


def set_page_config(title: str = "–°–∏—Å—Ç–µ–º–∞ –º–∞—Ö–∞–ª–ª–∏", icon: str = "üèõÔ∏è"):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        icon: –ò–∫–æ–Ω–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    st.set_page_config(
        page_title=title,
        page_icon=icon,
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    apply_custom_css()