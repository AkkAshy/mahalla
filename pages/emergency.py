"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date
from typing import Optional, List, Dict, Any

from config.database import DatabaseManager
from config.settings import SMS_TEMPLATES
from models.citizen import CitizenModel
from utils.helpers import (
    format_datetime, show_success_message, show_error_message
)
from utils.auth import get_current_user_id, has_permission

def show_emergency_page():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    st.markdown("# ‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission('emergency'):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    st.warning("""
    ‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∂–∏—Ç–µ–ª—è–º –º–∞—Ö–∞–ª–ª–∏.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥, 
    —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π, —Å—Ä–æ—á–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
    """)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    db = DatabaseManager()
    citizen_model = CitizenModel(db)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    with st.sidebar:
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        emergency_types = {
            "üíß –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥—ã": "water",
            "‚ö° –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞": "electricity", 
            "üî• –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–∑–∞": "gas",
            "üöß –î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": "road_works",
            "üö® –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è": "emergency",
            "üì¢ –°—Ä–æ—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ": "announcement"
        }
        
        for display_name, emergency_type in emergency_types.items():
            if st.button(display_name, use_container_width=True):
                st.session_state.emergency_action = "quick_send"
                st.session_state.emergency_type = emergency_type
                st.rerun()
        
        st.markdown("---")
        
        if st.button("üìã –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", use_container_width=True):
            st.session_state.emergency_action = "history"
        
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            st.session_state.emergency_action = "stats"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è—Ö
        st.markdown("---")
        st.markdown("### üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏")
        
        total_citizens = citizen_model.count("is_active = 1")
        with_phones = citizen_model.count("is_active = 1 AND phone IS NOT NULL AND phone != ''")
        
        st.metric("–í—Å–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω", total_citizens)
        st.metric("–° —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", with_phones)
        
        coverage = (with_phones / total_citizens * 100) if total_citizens > 0 else 0
        st.metric("–û—Ö–≤–∞—Ç SMS", f"{coverage:.1f}%")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    action = st.session_state.get('emergency_action', 'main')
    
    if action == "quick_send":
        emergency_type = st.session_state.get('emergency_type')
        show_quick_emergency_form(citizen_model, emergency_type)
    elif action == "custom_send":
        show_custom_emergency_form(citizen_model)
    elif action == "history":
        show_emergency_history(db)
    elif action == "stats":
        show_emergency_statistics(db)
    else:
        show_emergency_main(citizen_model)


def show_emergency_main(citizen_model: CitizenModel):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    st.markdown("### üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –ö–∞—Ä—Ç–æ—á–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    col1, col2, col3 = st.columns(3)
    
    with col1:
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(135deg, #FF6B6B, #FF8E53);
                color: white;
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                margin: 10px 0;
            ">
                <h3>üíß –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</h3>
                <p>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤–æ–¥—ã, –≥–∞–∑–∞, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", key="utilities", use_container_width=True):
                st.session_state.emergency_action = "quick_send"
                st.session_state.emergency_type = "utilities"
                st.rerun()
    
    with col2:
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(135deg, #4ECDC4, #44A08D);
                color: white;
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                margin: 10px 0;
            ">
                <h3>üöß –î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</h3>
                <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è—Ö –¥–æ—Ä–æ–≥</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", key="roads", use_container_width=True):
                st.session_state.emergency_action = "quick_send"
                st.session_state.emergency_type = "road_works"
                st.rerun()
    
    with col3:
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                margin: 10px 0;
            ">
                <h3>üì¢ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ</h3>
                <p>–°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", key="custom", use_container_width=True):
                st.session_state.emergency_action = "custom_send"
                st.rerun()
    
    st.markdown("---")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    recent_emergencies = get_recent_emergency_notifications(DatabaseManager())
    
    if recent_emergencies:
        for emergency in recent_emergencies[:5]:
            show_emergency_notification_card(emergency)
    else:
        st.info("üì≠ –ù–µ–¥–∞–≤–Ω–∏—Ö —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("---")
    with st.expander("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        ### –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
        
        **üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏:**
        - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥—ã, –≥–∞–∑–∞, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
        - –ê–≤–∞—Ä–∏–∏ –Ω–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
        - –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (–ø–æ–∂–∞—Ä, –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ)
        - –°—Ä–æ—á–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        
        **üü° –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
        - –î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        - –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
        - –°—Ä–æ—á–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        
        **‚ö™ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è:**
        - –û–±—ã—á–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–µ SMS)
        - –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        - –†–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        - –ü–ª–∞–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        ### –°–æ–≤–µ—Ç—ã –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π:
        - –ë—É–¥—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏
        - –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ
        - –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
        """)


def show_quick_emergency_form(citizen_model: CitizenModel, emergency_type: str):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä–æ–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.emergency_action = "main"
            st.rerun()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    emergency_configs = {
        "water": {
            "title": "üíß –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥—ã",
            "template": "emergency_water",
            "priority": 2,
            "icon": "üíß"
        },
        "electricity": {
            "title": "‚ö° –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", 
            "template": "emergency_electricity",
            "priority": 2,
            "icon": "‚ö°"
        },
        "gas": {
            "title": "üî• –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–∑–∞",
            "template": "emergency_gas", 
            "priority": 3,
            "icon": "üî•"
        },
        "road_works": {
            "title": "üöß –î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "template": "road_works",
            "priority": 1,
            "icon": "üöß"
        },
        "emergency": {
            "title": "üö® –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
            "template": "",
            "priority": 3,
            "icon": "üö®"
        },
        "announcement": {
            "title": "üì¢ –°—Ä–æ—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
            "template": "",
            "priority": 2,
            "icon": "üì¢"
        }
    }
    
    config = emergency_configs.get(emergency_type, emergency_configs["announcement"])
    
    st.markdown(f"#### {config['title']}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    priority_colors = {1: "üü°", 2: "üü†", 3: "üî¥"}
    priority_names = {1: "–ù–∏–∑–∫–∏–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–í—ã—Å–æ–∫–∏–π"}
    
    priority_icon = priority_colors.get(config['priority'], "‚ö™")
    priority_name = priority_names.get(config['priority'], "–û–±—ã—á–Ω—ã–π")
    
    st.info(f"{priority_icon} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: **{priority_name}**")
    
    with st.form("quick_emergency_form"):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = st.text_input(
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è *",
                value=config['title'],
                help="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
            )
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º
            template_text = SMS_TEMPLATES.get(config['template'], "")
            
            message_text = st.text_area(
                "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è *",
                value=template_text,
                height=150,
                max_chars=160,
                help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {start_time}, {end_time}, {location}, {reason}"
            )
            
            # –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
            char_count = len(message_text)
            color = "red" if char_count > 160 else "orange" if char_count > 140 else "green"
            st.markdown(f"<p style='color: {color}; font-size: 12px;'>–°–∏–º–≤–æ–ª–æ–≤: {char_count}/160</p>", 
                       unsafe_allow_html=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if "{start_time}" in template_text or "{end_time}" in template_text:
                col_start, col_end = st.columns(2)
                
                with col_start:
                    start_time = st.text_input("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", placeholder="09:00")
                
                with col_end:
                    end_time = st.text_input("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è", placeholder="18:00")
            
            if "{location}" in template_text:
                location = st.text_input("–ú–µ—Å—Ç–æ/–†–∞–π–æ–Ω", placeholder="—É–ª. –ù–∞–≤–æ–∏, –¥–æ–º–∞ 1-50")
            
            if "{reason}" in template_text:
                reason = st.text_input("–ü—Ä–∏—á–∏–Ω–∞", placeholder="–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
        
        with col2:
            st.markdown("#### üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏")
            
            # –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipient_scope = st.radio(
                "–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
                ["üåç –í—Å–µ–º –∂–∏—Ç–µ–ª—è–º", "üìç –ü–æ —Ä–∞–π–æ–Ω–∞–º", "üë• –í—ã–±–æ—Ä–æ—á–Ω–æ"],
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–± —Ä–∞—Å—Å—ã–ª–∫–∏"
            )
            
            if recipient_scope == "üìç –ü–æ —Ä–∞–π–æ–Ω–∞–º":
                areas = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã:",
                    ["—É–ª. –ù–∞–≤–æ–∏", "—É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞", "—É–ª. –ú—É—Å—Ç–∞–∫–∏–ª–ª–∏–∫", "—É–ª. –ë—É–Ω—ë–¥–∫–æ—Ä"],
                    help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–π–æ–Ω–æ–≤"
                )
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipient_count = get_emergency_recipients_count(citizen_model, recipient_scope)
            st.metric("üì± –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", recipient_count)
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
            if config['priority'] == 3:
                st.error("üî¥ **–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢**\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º!")
            
            st.markdown("#### ‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            send_immediately = st.checkbox("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", value=True)
            
            if not send_immediately:
                send_datetime = st.datetime_input(
                    "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    value=datetime.now(),
                    min_value=datetime.now()
                )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button(
            f"üö® –û–¢–ü–†–ê–í–ò–¢–¨ –≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï",
            use_container_width=True,
            type="primary"
        )
        
        if submitted:
            if not title.strip() or not message_text.strip():
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
            formatted_message = message_text
            
            if 'start_time' in locals():
                formatted_message = formatted_message.replace("{start_time}", start_time)
            if 'end_time' in locals():
                formatted_message = formatted_message.replace("{end_time}", end_time)
            if 'location' in locals():
                formatted_message = formatted_message.replace("{location}", location)
            if 'reason' in locals():
                formatted_message = formatted_message.replace("{reason}", reason)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = send_emergency_notification(
                title=title.strip(),
                message_text=formatted_message,
                emergency_type=emergency_type,
                priority=config['priority'],
                recipient_scope=recipient_scope,
                citizen_model=citizen_model
            )
            
            if success:
                show_success_message(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {recipient_count} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º!")
                st.session_state.emergency_action = "main"
                st.rerun()
            else:
                show_error_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


def show_custom_emergency_form(citizen_model: CitizenModel):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    st.markdown("### üì¢ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.emergency_action = "main"
            st.rerun()
    
    with st.form("custom_emergency_form"):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            title = st.text_input(
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è *",
                placeholder="–°—Ä–æ—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                help="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
            )
            
            emergency_type = st.selectbox(
                "–¢–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏",
                ["–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è", "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
                help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            )
            
            priority = st.selectbox(
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                [1, 2, 3],
                format_func=lambda x: f"{'üü° –ù–∏–∑–∫–∏–π' if x == 1 else 'üü† –°—Ä–µ–¥–Ω–∏–π' if x == 2 else 'üî¥ –í—ã—Å–æ–∫–∏–π'}",
                index=1,
                help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"
            )
            
            message_text = st.text_area(
                "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è *",
                height=200,
                max_chars=160,
                help="–ú–∞–∫—Å–∏–º—É–º 160 —Å–∏–º–≤–æ–ª–æ–≤"
            )
            
            # –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
            char_count = len(message_text)
            color = "red" if char_count > 160 else "orange" if char_count > 140 else "green"
            st.markdown(f"<p style='color: {color}; font-size: 12px;'>–°–∏–º–≤–æ–ª–æ–≤: {char_count}/160</p>", 
                       unsafe_allow_html=True)
        
        with col2:
            st.markdown("#### üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏")
            
            recipient_scope = st.radio(
                "–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
                ["üåç –í—Å–µ–º –∂–∏—Ç–µ–ª—è–º", "üì± –¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", "üë• –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É"],
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é"
            )
            
            if recipient_scope == "üë• –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É":
                age_groups = st.multiselect(
                    "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã:",
                    ["18-30 –ª–µ—Ç", "31-50 –ª–µ—Ç", "51-70 –ª–µ—Ç", "70+ –ª–µ—Ç"]
                )
            
            recipient_count = get_emergency_recipients_count(citizen_model, recipient_scope)
            st.metric("üì± –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", recipient_count)
            
            st.markdown("#### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            affected_area = st.text_input(
                "–ó–∞—Ç—Ä–æ–Ω—É—Ç–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
                placeholder="—É–ª. –ù–∞–≤–æ–∏, –¥–æ–º–∞ 1-50",
                help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é"
            )
            
            send_immediately = st.checkbox("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", value=True)
        
        submitted = st.form_submit_button(
            "üö® –û–¢–ü–†–ê–í–ò–¢–¨ –≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï",
            use_container_width=True,
            type="primary"
        )
        
        if submitted:
            if not title.strip() or not message_text.strip():
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return
            
            success = send_emergency_notification(
                title=title.strip(),
                message_text=message_text.strip(),
                emergency_type=emergency_type.lower().replace(' ', '_'),
                priority=priority,
                recipient_scope=recipient_scope,
                citizen_model=citizen_model,
                affected_area=affected_area.strip() if affected_area else None
            )
            
            if success:
                show_success_message(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {recipient_count} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º!")
                st.session_state.emergency_action = "main"
                st.rerun()
            else:
                show_error_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


def show_emergency_history(db: DatabaseManager):
    """–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    st.markdown("### üìã –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.emergency_action = "main"
            st.rerun()
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        period_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª", "–í—Å–µ –≤—Ä–µ–º—è"]
        )
    
    with col2:
        type_filter = st.selectbox(
            "–¢–∏–ø",
            ["–í—Å–µ", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è"]
        )
    
    with col3:
        priority_filter = st.selectbox(
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            ["–í—Å–µ", "–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"]
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    emergency_history = get_filtered_emergency_history(db, period_filter, type_filter, priority_filter)
    
    if emergency_history:
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(emergency_history)}")
        
        for emergency in emergency_history:
            show_emergency_history_card(emergency)
    else:
        st.info("üì≠ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def show_emergency_statistics(db: DatabaseManager):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.emergency_action = "main"
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_emergency_statistics(db)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üö® –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", stats.get('total_count', 0))
    
    with col2:
        st.metric("üìÖ –ó–∞ –º–µ—Å—è—Ü", stats.get('monthly_count', 0))
    
    with col3:
        st.metric("üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SMS", stats.get('total_sms', 0))
    
    with col4:
        avg_response_time = stats.get('avg_response_time', 0)
        st.metric("‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_response_time:.1f} –º–∏–Ω")
    
    st.markdown("---")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_stats = stats.get('by_type', {})
        if type_stats:
            st.markdown("#### üìã –ü–æ —Ç–∏–ø–∞–º —Å–∏—Ç—É–∞—Ü–∏–π")
            
            import plotly.express as px
            fig = px.pie(
                values=list(type_stats.values()),
                names=list(type_stats.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–∞—Ö")
    
    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        priority_stats = stats.get('by_priority', {})
        if priority_stats:
            st.markdown("#### üéØ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º")
            
            priority_names = {1: "–ù–∏–∑–∫–∏–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–í—ã—Å–æ–∫–∏–π"}
            
            labels = [priority_names.get(k, str(k)) for k in priority_stats.keys()]
            values = list(priority_stats.values())
            
            fig = px.bar(
                x=labels, y=values,
                title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º",
                color=labels,
                color_discrete_map={"–ù–∏–∑–∫–∏–π": "#FFC107", "–°—Ä–µ–¥–Ω–∏–π": "#FF9800", "–í—ã—Å–æ–∫–∏–π": "#F44336"}
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_emergency_recipients_count(citizen_model: CitizenModel, recipient_scope: str) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    if recipient_scope in ["üåç –í—Å–µ–º –∂–∏—Ç–µ–ª—è–º", "–í—Å–µ–º –∂–∏—Ç–µ–ª—è–º"]:
        return citizen_model.count("is_active = 1 AND phone IS NOT NULL AND phone != ''")
    elif recipient_scope in ["üì± –¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", "–¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏"]:
        return citizen_model.count("is_active = 1 AND phone IS NOT NULL AND phone != ''")
    elif recipient_scope in ["üìç –ü–æ —Ä–∞–π–æ–Ω–∞–º", "–ü–æ —Ä–∞–π–æ–Ω–∞–º"]:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ
        return citizen_model.count("is_active = 1 AND phone IS NOT NULL AND phone != ''") // 2
    else:
        return citizen_model.count("is_active = 1 AND phone IS NOT NULL AND phone != ''")


def send_emergency_notification(
    title: str,
    message_text: str,
    emergency_type: str,
    priority: int,
    recipient_scope: str,
    citizen_model: CitizenModel,
    affected_area: Optional[str] = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = citizen_model.get_citizens_with_phones()
        
        if not recipients:
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö SMS
        db = citizen_model.db
        
        emergency_id = db.execute_query("""
            INSERT INTO emergency_sms (title, message_text, emergency_type, priority, affected_area, sent_count, created_by)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (title, message_text, emergency_type, priority, affected_area, len(recipients), get_current_user_id()), fetch=False)
        
        if not emergency_id:
            return False
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ SMS API
        # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        for recipient in recipients:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ SMS
            db.execute_query("""
                INSERT INTO sms_logs (campaign_id, citizen_id, phone, message_text, status, sent_at)
                VALUES (?, ?, ?, ?, 'SENT', ?)
            """, (None, recipient['id'], recipient['phone'], message_text, datetime.now().isoformat()), fetch=False)
        
        return True
        
    except Exception as e:
        return False


def get_recent_emergency_notifications(db: DatabaseManager) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    query = """
        SELECT * FROM emergency_sms
        ORDER BY created_at DESC
        LIMIT 10
    """
    
    result = db.execute_query(query)
    return [dict(row) for row in result] if result else []


def show_emergency_notification_card(emergency: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    priority_colors = {1: "#FFC107", 2: "#FF9800", 3: "#F44336"}
    priority_names = {1: "üü° –ù–∏–∑–∫–∏–π", 2: "üü† –°—Ä–µ–¥–Ω–∏–π", 3: "üî¥ –í—ã—Å–æ–∫–∏–π"}
    
    priority = emergency.get('priority', 1)
    priority_color = priority_colors.get(priority, "#999999")
    priority_name = priority_names.get(priority, "‚ö™ –û–±—ã—á–Ω—ã–π")
    
    with st.container():
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"**{emergency['title']}**")
            st.caption(f"üìÖ {format_datetime(emergency['created_at'])}")
            
            if emergency['affected_area']:
                st.caption(f"üìç {emergency['affected_area']}")
        
        with col2:
            st.markdown(f"""
            <div style="
                background-color: {priority_color};
                color: white;
                padding: 4px 8px;
                border-radius: 10px;
                text-align: center;
                font-size: 12px;
                font-weight: bold;
            ">
                {priority_name}
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.metric("üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", emergency.get('sent_count', 0))
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        message_preview = emergency['message_text'][:80]
        if len(emergency['message_text']) > 80:
            message_preview += "..."
        
        st.caption(f"üí¨ {message_preview}")
        
        st.markdown("---")


def get_filtered_emergency_history(
    db: DatabaseManager,
    period_filter: str,
    type_filter: str,
    priority_filter: str
) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    where_conditions = []
    params = []
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
    if period_filter == "–ó–∞ –Ω–µ–¥–µ–ª—é":
        where_conditions.append("created_at >= date('now', '-7 days')")
    elif period_filter == "–ó–∞ –º–µ—Å—è—Ü":
        where_conditions.append("created_at >= date('now', '-30 days')")
    elif period_filter == "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª":
        where_conditions.append("created_at >= date('now', '-90 days')")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    if type_filter != "–í—Å–µ":
        type_map = {
            "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏": "utilities",
            "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": "road_works",
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "security",
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è": "medical"
        }
        emergency_type = type_map.get(type_filter)
        if emergency_type:
            where_conditions.append("emergency_type = ?")
            params.append(emergency_type)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if priority_filter != "–í—Å–µ":
        priority_map = {"–ù–∏–∑–∫–∏–π": 1, "–°—Ä–µ–¥–Ω–∏–π": 2, "–í—ã—Å–æ–∫–∏–π": 3}
        priority_value = priority_map.get(priority_filter)
        if priority_value:
            where_conditions.append("priority = ?")
            params.append(priority_value)
    
    where_clause = " AND ".join(where_conditions) if where_conditions else ""
    
    query = f"""
        SELECT * FROM emergency_sms
        {f'WHERE {where_clause}' if where_clause else ''}
        ORDER BY created_at DESC
    """
    
    result = db.execute_query(query, tuple(params))
    return [dict(row) for row in result] if result else []


def show_emergency_history_card(emergency: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    priority_icons = {1: "üü°", 2: "üü†", 3: "üî¥"}
    priority_names = {1: "–ù–∏–∑–∫–∏–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–í—ã—Å–æ–∫–∏–π"}
    
    priority = emergency.get('priority', 1)
    priority_icon = priority_icons.get(priority, "‚ö™")
    priority_name = priority_names.get(priority, "–û–±—ã—á–Ω—ã–π")
    
    with st.expander(f"{priority_icon} {emergency['title']} - {format_datetime(emergency['created_at'])}"):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ:**")
            st.write(emergency['message_text'])
            
            if emergency['affected_area']:
                st.markdown(f"**–ó–∞—Ç—Ä–æ–Ω—É—Ç–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:** {emergency['affected_area']}")
        
        with col2:
            st.metric("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", priority_name)
            st.metric("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SMS", emergency.get('sent_count', 0))
            st.metric("–¢–∏–ø", emergency.get('emergency_type', '–ù–µ —É–∫–∞–∑–∞–Ω'))


def get_emergency_statistics(db: DatabaseManager) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    stats = {}
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total_query = "SELECT COUNT(*) as count FROM emergency_sms"
    total_result = db.execute_query(total_query)
    stats['total_count'] = total_result[0]['count'] if total_result else 0
    
    # –ó–∞ –º–µ—Å—è—Ü
    monthly_query = "SELECT COUNT(*) as count FROM emergency_sms WHERE created_at >= date('now', '-30 days')"
    monthly_result = db.execute_query(monthly_query)
    stats['monthly_count'] = monthly_result[0]['count'] if monthly_result else 0
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö SMS
    sms_query = "SELECT SUM(sent_count) as total FROM emergency_sms"
    sms_result = db.execute_query(sms_query)
    stats['total_sms'] = sms_result[0]['total'] if sms_result and sms_result[0]['total'] else 0
    
    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
    stats['avg_response_time'] = 2.5  # –º–∏–Ω—É—Ç—ã (–¥–ª—è –¥–µ–º–æ)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    type_query = """
        SELECT emergency_type, COUNT(*) as count
        FROM emergency_sms
        GROUP BY emergency_type
    """
    type_result = db.execute_query(type_query)
    if type_result:
        stats['by_type'] = {row['emergency_type']: row['count'] for row in type_result}
    else:
        stats['by_type'] = {}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    priority_query = """
        SELECT priority, COUNT(*) as count
        FROM emergency_sms
        GROUP BY priority
    """
    priority_result = db.execute_query(priority_query)
    if priority_result:
        stats['by_priority'] = {row['priority']: row['count'] for row in priority_result}
    else:
        stats['by_priority'] = {}
    
    return stats