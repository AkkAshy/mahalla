"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ SMS-—Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any

from config.database import DatabaseManager
from config.settings import SMS_TEMPLATES
from models.sms import SMSModel
from models.citizen import CitizenModel
from models.meeting import MeetingModel
from utils.helpers import (
    format_datetime, Paginator, show_success_message, show_error_message
)
from utils.auth import get_current_user_id, has_permission
from utils.validators import validate_sms_data, StreamlitValidationHelper

def show_sms_page():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã SMS-—Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    st.markdown("# üì± SMS-—Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission('sms'):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    db = DatabaseManager()
    sms_model = SMSModel(db)
    citizen_model = CitizenModel(db)
    meeting_model = MeetingModel(db)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    with st.sidebar:
        st.markdown("### üîß –î–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", use_container_width=True):
            st.session_state.sms_action = "create"
        
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            st.session_state.sms_action = "stats"
        
        if st.button("üìã –®–∞–±–ª–æ–Ω—ã", use_container_width=True):
            st.session_state.sms_action = "templates"
        
        st.markdown("---")
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.markdown("### üîç –§–∏–ª—å—Ç—Ä—ã")
        
        search_term = st.text_input(
            "–ü–æ–∏—Å–∫",
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏...",
            help="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        
        campaign_type = st.selectbox(
            "–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏",
            ["–í—Å–µ", "–û–±—ã—á–Ω–∞—è", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"],
            help="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É SMS –∫–∞–º–ø–∞–Ω–∏–∏"
        )
        
        date_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª", "–í—Å–µ –≤—Ä–µ–º—è"],
            help="–§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è"
        )
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìà –°–≤–æ–¥–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        quick_stats = get_quick_sms_stats(sms_model)
        
        st.metric("üì§ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π", quick_stats.get('total_campaigns', 0))
        st.metric("üì± SMS –∑–∞ –º–µ—Å—è—Ü", quick_stats.get('monthly_sms', 0))
        st.metric("‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö", quick_stats.get('delivered_rate', 0), 
                 delta=f"{quick_stats.get('delivered_percentage', 0):.1f}%")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    action = st.session_state.get('sms_action', 'list')
    
    if action == "create":
        show_create_sms_form(sms_model, citizen_model, meeting_model)
    elif action == "view":
        campaign_id = st.session_state.get('view_campaign_id')
        if campaign_id:
            show_campaign_details(sms_model, campaign_id)
        else:
            st.error("ID –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            st.session_state.sms_action = "list"
    elif action == "stats":
        show_sms_statistics(sms_model)
    elif action == "templates":
        show_sms_templates()
    else:
        show_sms_campaigns_list(sms_model, search_term, campaign_type, date_filter)


def show_sms_campaigns_list(
    sms_model: SMSModel,
    search_term: str,
    campaign_type: str,
    date_filter: str
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ SMS –∫–∞–º–ø–∞–Ω–∏–π"""
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown("### üìã –ò—Å—Ç–æ—Ä–∏—è SMS-—Ä–∞—Å—Å—ã–ª–æ–∫")
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.rerun()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
    where_conditions = []
    params = []
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    if search_term:
        search_conditions = [
            "UPPER(title) LIKE UPPER(?)",
            "UPPER(message_text) LIKE UPPER(?)"
        ]
        where_conditions.append(f"({' OR '.join(search_conditions)})")
        search_param = f"%{search_term}%"
        params.extend([search_param] * 2)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–∞–º–ø–∞–Ω–∏–∏
    if campaign_type != "–í—Å–µ":
        type_map = {
            "–û–±—ã—á–Ω–∞—è": "REGULAR",
            "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è": "EMERGENCY",
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ": "REMINDER"
        }
        sms_type = type_map.get(campaign_type)
        if sms_type:
            where_conditions.append("campaign_type = ?")
            params.append(sms_type)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    date_condition = get_sms_date_filter_condition(date_filter)
    if date_condition:
        where_conditions.append(date_condition)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    where_clause = " AND ".join(where_conditions) if where_conditions else ""
    campaigns = sms_model.get_all(where_clause, tuple(params), "created_at DESC")
    
    if not campaigns:
        st.info("üì± SMS –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(campaigns, items_per_page=10)
    current_page = paginator.show_pagination_controls("sms_pagination")
    page_campaigns = paginator.get_page(current_page)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
    for campaign in page_campaigns:
        show_campaign_card(campaign, sms_model)


def show_campaign_card(campaign: Dict[str, Any], sms_model: SMSModel):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ SMS –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –∫–∞–º–ø–∞–Ω–∏–π
    type_colors = {
        'REGULAR': '#2196F3',    # –°–∏–Ω–∏–π
        'EMERGENCY': '#F44336',  # –ö—Ä–∞—Å–Ω—ã–π
        'REMINDER': '#FF9800'    # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    }
    
    type_names = {
        'REGULAR': 'üì¢ –û–±—ã—á–Ω–∞—è',
        'EMERGENCY': 'üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è',
        'REMINDER': '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
    }
    
    campaign_type = campaign['campaign_type']
    type_color = type_colors.get(campaign_type, '#999999')
    type_name = type_names.get(campaign_type, campaign_type)
    
    with st.container():
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–º–ø–∞–Ω–∏–∏
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"### {campaign['title']}")
            
            # –¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏
            st.markdown(f"""
            <div style="
                background-color: {type_color};
                color: white;
                padding: 4px 12px;
                border-radius: 15px;
                display: inline-block;
                font-size: 12px;
                font-weight: bold;
                margin: 5px 0;
            ">
                {type_name}
            </div>
            """, unsafe_allow_html=True)
            
            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = format_datetime(campaign['created_at'])
            st.caption(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}")
        
        with col2:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            sent_count = campaign['sent_count'] or 0
            delivered_count = campaign['delivered_count'] or 0
            failed_count = campaign['failed_count'] or 0
            
            st.metric("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", sent_count)
            
            if sent_count > 0:
                success_rate = (delivered_count / sent_count) * 100
                st.metric("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", delivered_count, delta=f"{success_rate:.1f}%")
                
                if failed_count > 0:
                    st.metric("‚ùå –û—à–∏–±–∫–∏", failed_count)
        
        with col3:
            # –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
            if campaign['sent_at']:
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                sent_at = format_datetime(campaign['sent_at'])
                st.caption(f"–í—Ä–µ–º—è: {sent_at}")
            elif campaign['scheduled_at']:
                st.info("‚è±Ô∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
                scheduled_at = format_datetime(campaign['scheduled_at'])
                st.caption(f"–ù–∞: {scheduled_at}")
            else:
                st.warning("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫")
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_preview = campaign['message_text'][:100]
        if len(campaign['message_text']) > 100:
            message_preview += "..."
        
        with st.expander("üí¨ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"):
            st.write(campaign['message_text'])
            st.caption(f"–î–ª–∏–Ω–∞: {len(campaign['message_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"view_{campaign['id']}"):
                st.session_state.sms_action = "view"
                st.session_state.view_campaign_id = campaign['id']
                st.rerun()
        
        with col2:
            if not campaign['sent_at']:
                if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", key=f"send_{campaign['id']}"):
                    send_campaign_now(sms_model, campaign['id'])
        
        with col3:
            if campaign['sent_at']:
                if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", key=f"stats_{campaign['id']}"):
                    show_campaign_stats_modal(sms_model, campaign['id'])
        
        with col4:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{campaign['id']}"):
                if st.session_state.get(f"confirm_delete_sms_{campaign['id']}"):
                    success = sms_model.delete(campaign['id'])
                    if success:
                        show_success_message("SMS –∫–∞–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞")
                        st.rerun()
                    else:
                        show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏")
                else:
                    st.session_state[f"confirm_delete_sms_{campaign['id']}"] = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        st.markdown("---")


def show_create_sms_form(sms_model: SMSModel, citizen_model: CitizenModel, meeting_model: MeetingModel):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π SMS —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    st.markdown("### üì§ –°–æ–∑–¥–∞–Ω–∏–µ SMS-—Ä–∞—Å—Å—ã–ª–∫–∏")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.sms_action = "list"
            st.rerun()
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        sms_type = st.selectbox(
            "–¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏",
            ["–û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø SMS —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
    
    with col2:
        if sms_type == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏":
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è
            upcoming_meetings = meeting_model.get_upcoming_meetings(30)
            
            if upcoming_meetings:
                meeting_options = {}
                for meeting in upcoming_meetings:
                    meeting_date = format_datetime(meeting['meeting_date'])
                    meeting_options[meeting['id']] = f"{meeting['title']} ({meeting_date})"
                
                selected_meeting_id = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ",
                    options=list(meeting_options.keys()),
                    format_func=lambda x: meeting_options[x],
                    help="–ó–∞—Å–µ–¥–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                )
            else:
                st.warning("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π")
                selected_meeting_id = None
        elif sms_type == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω":
            template_name = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω",
                options=list(SMS_TEMPLATES.keys()),
                format_func=lambda x: x.replace('_', ' ').title(),
                help="–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
    
    with st.form("create_sms_form"):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–º–ø–∞–Ω–∏–∏
            title = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ *",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–±–±–æ—Ç–Ω–∏–∫–µ",
                help="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            )
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if sms_type == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏" and 'selected_meeting_id' in locals() and selected_meeting_id:
                # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏
                meeting = meeting_model.get_by_id(selected_meeting_id)
                if meeting:
                    default_message = create_meeting_notification_text(meeting)
                else:
                    default_message = ""
            elif sms_type == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                default_message = SMS_TEMPLATES.get(template_name, "")
            else:
                default_message = ""
            
            message_text = st.text_area(
                "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è *",
                value=default_message,
                height=150,
                max_chars=160,
                help="–ú–∞–∫—Å–∏–º—É–º 160 —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {date}, {time}, {location}"
            )
            
            # –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
            char_count = len(message_text)
            color = "red" if char_count > 160 else "orange" if char_count > 140 else "green"
            st.markdown(f"<p style='color: {color}; font-size: 12px;'>–°–∏–º–≤–æ–ª–æ–≤: {char_count}/160</p>", 
                       unsafe_allow_html=True)
        
        with col2:
            st.markdown("#### üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏")
            
            # –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipient_type = st.radio(
                "–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
                ["–í—Å–µ–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º", "–¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", "–í—ã–±–æ—Ä–æ—á–Ω–æ"],
                help="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"
            )
            
            if recipient_type == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É":
                age_group = st.selectbox(
                    "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
                    ["18-30 –ª–µ—Ç", "31-50 –ª–µ—Ç", "51-70 –ª–µ—Ç", "70+ –ª–µ—Ç"]
                )
            elif recipient_type == "–í—ã–±–æ—Ä–æ—á–Ω–æ":
                st.info("–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏")
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipient_count = get_recipients_count(citizen_model, recipient_type)
            st.metric("üì± –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", recipient_count)
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            st.markdown("#### ‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            send_now = st.checkbox("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", value=True)
            
            if not send_now:
                scheduled_date = st.date_input(
                    "–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    min_value=date.today(),
                    value=date.today()
                )
                
                scheduled_time = st.time_input(
                    "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    value=datetime.now().time()
                )
        
        # –ö–Ω–æ–ø–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            submitted = st.form_submit_button("üì§ –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" if send_now else "üìù –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", 
                                            use_container_width=True)
        
        with col2:
            preview = st.form_submit_button("üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", use_container_width=True)
        
        if preview:
            show_sms_preview(message_text, recipient_count)
        
        if submitted:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
            campaign_data = {
                'title': title.strip() if title else '',
                'message_text': message_text.strip() if message_text else ''
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if StreamlitValidationHelper.validate_and_show(campaign_data, validate_sms_data):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                scheduled_at = None
                if not send_now:
                    scheduled_datetime = datetime.combine(scheduled_date, scheduled_time)
                    scheduled_at = scheduled_datetime
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
                campaign_id = sms_model.create_campaign(
                    title=campaign_data['title'],
                    message_text=campaign_data['message_text'],
                    campaign_type='REMINDER' if sms_type == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏" else 'REGULAR',
                    scheduled_at=scheduled_at,
                    created_by=get_current_user_id()
                )
                
                if campaign_id:
                    if send_now:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                        recipients = get_recipients_list(citizen_model, recipient_type)
                        result = sms_model.send_campaign(campaign_id, recipients)
                        
                        if result['success']:
                            show_success_message(
                                f"SMS –∫–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! "
                                f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {result['sent_count']}, "
                                f"–û—à–∏–±–æ–∫: {result['failed_count']}"
                            )
                        else:
                            show_error_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    else:
                        show_success_message("SMS –∫–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!")
                    
                    st.session_state.sms_action = "list"
                    st.rerun()
                else:
                    show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SMS –∫–∞–º–ø–∞–Ω–∏–∏")


def show_campaign_details(sms_model: SMSModel, campaign_id: int):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SMS –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    st.markdown("### üëÅÔ∏è –î–µ—Ç–∞–ª–∏ SMS –∫–∞–º–ø–∞–Ω–∏–∏")
    
    campaign = sms_model.get_by_id(campaign_id)
    if not campaign:
        st.error("SMS –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.session_state.sms_action = "list"
        return
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.sms_action = "list"
            st.rerun()
    
    with col2:
        st.info(f"–ö–∞–º–ø–∞–Ω–∏—è: {campaign['title']}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("#### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {campaign['title']}")
        st.write(f"**–¢–∏–ø:** {get_campaign_type_name(campaign['campaign_type'])}")
        st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {format_datetime(campaign['created_at'])}")
        
        if campaign['sent_at']:
            st.write(f"**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {format_datetime(campaign['sent_at'])}")
        elif campaign['scheduled_at']:
            st.write(f"**–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:** {format_datetime(campaign['scheduled_at'])}")
    
    with col2:
        st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.metric("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", campaign['sent_count'] or 0)
        st.metric("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", campaign['delivered_count'] or 0)
        st.metric("‚ùå –û—à–∏–±–∫–∏", campaign['failed_count'] or 0)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if campaign['sent_count'] and campaign['sent_count'] > 0:
            success_rate = (campaign['delivered_count'] or 0) / campaign['sent_count'] * 100
            st.metric("üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")
    
    with col3:
        st.markdown("#### üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ")
        st.text_area("–¢–µ–∫—Å—Ç:", value=campaign['message_text'], height=150, disabled=True)
        st.caption(f"–î–ª–∏–Ω–∞: {len(campaign['message_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ñ—É—Ä–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
    st.markdown("---")
    st.markdown("#### üìã –ñ—É—Ä–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    logs_query = """
        SELECT sl.*, c.full_name
        FROM sms_logs sl
        LEFT JOIN citizens c ON sl.citizen_id = c.id
        WHERE sl.campaign_id = ?
        ORDER BY sl.created_at DESC
    """
    
    logs = sms_model.db.execute_query(logs_query, (campaign_id,))
    
    if logs:
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ª–æ–≥–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            status_filter = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                ["–í—Å–µ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", "–û—à–∏–±–∫–∞"]
            )
        
        with col2:
            search_phone = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏
        filtered_logs = filter_sms_logs(logs, status_filter, search_phone)
        
        if filtered_logs:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
            df_logs = pd.DataFrame([dict(log) for log in filtered_logs])
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            column_config = {
                "full_name": "–§–ò–û",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "status": "–°—Ç–∞—Ç—É—Å",
                "sent_at": "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                "error_message": "–û—à–∏–±–∫–∞"
            }
            
            st.dataframe(
                df_logs[list(column_config.keys())].rename(columns=column_config),
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        st.info("–ñ—É—Ä–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç")


def show_sms_statistics(sms_model: SMSModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SMS —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SMS-—Ä–∞—Å—Å—ã–ª–æ–∫")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.sms_action = "list"
            st.rerun()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = get_comprehensive_sms_stats(sms_model)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üì§ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π", stats.get('total_campaigns', 0))
    
    with col2:
        st.metric("üì± –í—Å–µ–≥–æ SMS", stats.get('total_sms', 0))
    
    with col3:
        delivery_rate = stats.get('delivery_rate', 0)
        st.metric("üìà –î–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç—å", f"{delivery_rate:.1f}%")
    
    with col4:
        st.metric("üìÖ –ó–∞ –º–µ—Å—è—Ü", stats.get('monthly_campaigns', 0))
    
    st.markdown("---")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–∞–º–ø–∞–Ω–∏–π
        type_stats = stats.get('by_type', {})
        if type_stats:
            st.markdown("#### üìã –ö–∞–º–ø–∞–Ω–∏–∏ –ø–æ —Ç–∏–ø–∞–º")
            
            type_names = {
                'REGULAR': '–û–±—ã—á–Ω—ã–µ',
                'EMERGENCY': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ',
                'REMINDER': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
            }
            
            import plotly.express as px
            
            labels = [type_names.get(k, k) for k in type_stats.keys()]
            values = list(type_stats.values())
            
            fig = px.pie(
                values=values,
                names=labels,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–∞—Ö –∫–∞–º–ø–∞–Ω–∏–π")
    
    with col2:
        # –î–∏–Ω–∞–º–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
        monthly_data = get_monthly_sms_data(sms_model)
        if monthly_data:
            st.markdown("#### üìà –î–∏–Ω–∞–º–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            df = pd.DataFrame(monthly_data)
            
            import plotly.express as px
            fig = px.bar(
                df, x='month', y='count',
                title="SMS –ø–æ –º–µ—Å—è—Ü–∞–º",
                labels={'month': '–ú–µ—Å—è—Ü', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS'}
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏")


def show_sms_templates():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ SMS"""
    
    st.markdown("### üìã –®–∞–±–ª–æ–Ω—ã SMS —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.sms_action = "list"
            st.rerun()
    
    st.markdown("–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è SMS-—Ä–∞—Å—Å—ã–ª–æ–∫:")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    for template_key, template_text in SMS_TEMPLATES.items():
        template_name = template_key.replace('_', ' ').title()
        
        with st.expander(f"üìÑ {template_name}"):
            st.code(template_text, language="text")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", key=f"use_{template_key}"):
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —ç—Ç–∏–º —à–∞–±–ª–æ–Ω–æ–º
                    st.session_state.sms_action = "create"
                    st.session_state.selected_template = template_key
                    st.rerun()
            
            with col2:
                st.caption("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {date}, {time}, {location}, {reason}")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_quick_sms_stats(sms_model: SMSModel) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SMS"""
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π
    total_campaigns = sms_model.count()
    
    # –ö–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –º–µ—Å—è—Ü
    monthly_campaigns = sms_model.count("created_at >= date('now', '-30 days')")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_query = """
        SELECT 
            COUNT(*) as total_sms,
            SUM(CASE WHEN status = 'DELIVERED' THEN 1 ELSE 0 END) as delivered
        FROM sms_logs
    """
    
    result = sms_model.db.execute_query(delivery_query)
    
    if result:
        total_sms = result[0]['total_sms']
        delivered = result[0]['delivered']
        delivery_rate = (delivered / total_sms * 100) if total_sms > 0 else 0
    else:
        total_sms = 0
        delivered = 0
        delivery_rate = 0
    
    return {
        'total_campaigns': total_campaigns,
        'monthly_campaigns': monthly_campaigns,
        'monthly_sms': total_sms,  # –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
        'delivered_rate': delivered,
        'delivered_percentage': delivery_rate
    }


def get_comprehensive_sms_stats(sms_model: SMSModel) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SMS"""
    
    stats = {}
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π
    stats['total_campaigns'] = sms_model.count()
    
    # –ö–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –º–µ—Å—è—Ü
    stats['monthly_campaigns'] = sms_model.count("created_at >= date('now', '-30 days')")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    type_query = """
        SELECT campaign_type, COUNT(*) as count
        FROM sms_campaigns
        GROUP BY campaign_type
    """
    
    type_result = sms_model.db.execute_query(type_query)
    if type_result:
        stats['by_type'] = {row['campaign_type']: row['count'] for row in type_result}
    else:
        stats['by_type'] = {}
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SMS
    sms_stats_query = """
        SELECT 
            COUNT(*) as total_sms,
            SUM(CASE WHEN status = 'DELIVERED' THEN 1 ELSE 0 END) as delivered,
            SUM(CASE WHEN status = 'FAILED' THEN 1 ELSE 0 END) as failed
        FROM sms_logs
    """
    
    sms_result = sms_model.db.execute_query(sms_stats_query)
    if sms_result:
        total_sms = sms_result[0]['total_sms']
        delivered = sms_result[0]['delivered']
        
        stats['total_sms'] = total_sms
        stats['delivery_rate'] = (delivered / total_sms * 100) if total_sms > 0 else 0
    else:
        stats['total_sms'] = 0
        stats['delivery_rate'] = 0
    
    return stats


def get_sms_date_filter_condition(date_filter: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ"""
    
    conditions = {
        "–ó–∞ –Ω–µ–¥–µ–ª—é": "created_at >= date('now', '-7 days')",
        "–ó–∞ –º–µ—Å—è—Ü": "created_at >= date('now', '-30 days')",
        "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª": "created_at >= date('now', '-90 days')"
    }
    
    return conditions.get(date_filter, "")


def get_monthly_sms_data(sms_model: SMSModel) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ SMS –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã"""
    
    query = """
        SELECT 
            strftime('%Y-%m', created_at) as month,
            COUNT(*) as count
        FROM sms_logs 
        WHERE created_at >= date('now', '-12 months')
        GROUP BY strftime('%Y-%m', created_at)
        ORDER BY month
    """
    
    result = sms_model.db.execute_query(query)
    
    if result:
        data = []
        for row in result:
            month_str = row['month']
            try:
                month_date = datetime.strptime(month_str, '%Y-%m')
                month_name = month_date.strftime('%b %Y')
            except:
                month_name = month_str
            
            data.append({
                'month': month_name,
                'count': row['count']
            })
        
        return data
    
    return []


def get_recipients_count(citizen_model: CitizenModel, recipient_type: str) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    
    if recipient_type == "–í—Å–µ–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º":
        return citizen_model.count("is_active = 1")
    elif recipient_type == "–¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏":
        return citizen_model.count("is_active = 1 AND phone IS NOT NULL AND phone != ''")
    elif recipient_type == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É":
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –¥–ª—è –¥–µ–º–æ
        return citizen_model.count("is_active = 1 AND birth_date IS NOT NULL")
    else:
        return 0


def get_recipients_list(citizen_model: CitizenModel, recipient_type: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    
    if recipient_type == "–¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏":
        citizens = citizen_model.get_citizens_with_phones()
    else:
        citizens = citizen_model.get_active_citizens()
    
    recipients = []
    for citizen in citizens:
        if citizen['phone']:
            recipients.append({
                'citizen_id': citizen['id'],
                'phone': citizen['phone'],
                'full_name': citizen['full_name']
            })
    
    return recipients


def create_meeting_notification_text(meeting: Dict[str, Any]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏"""
    
    meeting_date = format_datetime(meeting['meeting_date'], 'short')
    meeting_time = meeting['meeting_time'] or "10:00"
    location = meeting['location'] or "–ó–¥–∞–Ω–∏–µ –º–∞—Ö–∞–ª–ª–∏"
    
    return f"""–£–≤–∞–∂–∞–µ–º—ã–µ –∂–∏—Ç–µ–ª–∏!
{meeting_date} –≤ {meeting_time} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∑–∞—Å–µ–¥–∞–Ω–∏–µ –º–∞—Ö–∞–ª–ª–∏.
–¢–µ–º–∞: {meeting['title']}
–ú–µ—Å—Ç–æ: {location}
–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤–∞–∂–Ω–æ!"""


def show_sms_preview(message_text: str, recipient_count: int):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä SMS"""
    
    st.markdown("#### üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("**–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**")
        st.text_area("", value=message_text, height=100, disabled=True)
        
        char_count = len(message_text)
        sms_count = (char_count + 159) // 160  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS —á–∞—Å—Ç–µ–π
        
        st.caption(f"–°–∏–º–≤–æ–ª–æ–≤: {char_count}/160 | SMS —á–∞—Å—Ç–µ–π: {sms_count}")
    
    with col2:
        st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
        st.metric("üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", recipient_count)
        st.metric("üì± SMS —á–∞—Å—Ç–µ–π", sms_count)
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¥–ª—è –¥–µ–º–æ)
        estimated_cost = recipient_count * sms_count * 25  # 25 —Å—É–º –∑–∞ SMS
        st.metric("üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{estimated_cost} —Å—É–º")


def send_campaign_now(sms_model: SMSModel, campaign_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    from models.citizen import CitizenModel
    
    db = DatabaseManager()
    citizen_model = CitizenModel(db)
    
    recipients = get_recipients_list(citizen_model, "–¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏")
    
    if not recipients:
        show_error_message("–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    result = sms_model.send_campaign(campaign_id, recipients)
    
    if result['success']:
        show_success_message(
            f"SMS –∫–∞–º–ø–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! "
            f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {result['sent_count']}, "
            f"–û—à–∏–±–æ–∫: {result['failed_count']}"
        )
        st.rerun()
    else:
        show_error_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


def show_campaign_stats_modal(sms_model: SMSModel, campaign_id: int):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    # –í Streamlit –Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ sidebar
    with st.sidebar:
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        campaign = sms_model.get_by_id(campaign_id)
        if campaign:
            st.metric("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", campaign['sent_count'] or 0)
            st.metric("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", campaign['delivered_count'] or 0)
            st.metric("‚ùå –û—à–∏–±–∫–∏", campaign['failed_count'] or 0)
            
            if campaign['sent_count'] and campaign['sent_count'] > 0:
                success_rate = (campaign['delivered_count'] or 0) / campaign['sent_count'] * 100
                st.metric("üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")


def filter_sms_logs(logs: List[Dict], status_filter: str, search_phone: str) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ SMS"""
    
    filtered = logs
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status_filter != "–í—Å–µ":
        status_map = {
            "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "SENT",
            "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ": "DELIVERED", 
            "–û—à–∏–±–∫–∞": "FAILED"
        }
        target_status = status_map.get(status_filter)
        if target_status:
            filtered = [log for log in filtered if log['status'] == target_status]
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if search_phone:
        filtered = [log for log in filtered if search_phone in (log['phone'] or '')]
    
    return filtered


def get_campaign_type_name(campaign_type: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    type_names = {
        'REGULAR': 'üì¢ –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞',
        'EMERGENCY': 'üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        'REMINDER': '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
    }
    
    return type_names.get(campaign_type, campaign_type)