"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any
import io

from config.database import DatabaseManager
from models.citizen import CitizenModel
from models.meeting import MeetingModel
from models.points import PointsModel
from models.sms import SMSModel
from utils.helpers import (
    format_date, format_datetime, create_excel_download_button,
    show_success_message, show_error_message
)
from utils.auth import get_current_user_id, has_permission

def show_reports_page():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤"""
    
    st.markdown("# üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission('reports'):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    db = DatabaseManager()
    citizen_model = CitizenModel(db)
    meeting_model = MeetingModel(db)
    points_model = PointsModel(db)
    sms_model = SMSModel(db)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
    with st.sidebar:
        st.markdown("### üìã –¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤")
        
        report_types = {
            "üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞": "dashboard",
            "üë• –û—Ç—á–µ—Ç –ø–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º": "citizens",
            "üèõÔ∏è –û—Ç—á–µ—Ç –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º": "meetings",
            "‚≠ê –û—Ç—á–µ—Ç –ø–æ –±–∞–ª–ª–∞–º": "points",
            "üì± –û—Ç—á–µ—Ç –ø–æ SMS": "sms",
            "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "analytics",
            "üìÅ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç": "comprehensive"
        }
        
        for display_name, report_type in report_types.items():
            if st.button(display_name, use_container_width=True):
                st.session_state.report_type = report_type
                st.rerun()
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.markdown("### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        
        db_info = db.get_database_info()
        
        st.metric("üíæ –†–∞–∑–º–µ—Ä –ë–î", f"{db_info.get('file_size_mb', 0)} –ú–ë")
        st.metric("üë• –ì—Ä–∞–∂–¥–∞–Ω", db_info.get('citizens_count', 0))
        st.metric("üèõÔ∏è –ó–∞—Å–µ–¥–∞–Ω–∏–π", db_info.get('meetings_count', 0))
        st.metric("üì± SMS –∫–∞–º–ø–∞–Ω–∏–π", db_info.get('sms_campaigns_count', 0))
        st.metric("‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–∏–π", db_info.get('citizen_points_count', 0))
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.markdown("---")
        st.markdown("### üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        if st.button("üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", use_container_width=True):
            create_backup(db)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
    report_type = st.session_state.get('report_type', 'dashboard')
    
    if report_type == "dashboard":
        show_reports_dashboard(citizen_model, meeting_model, points_model, sms_model)
    elif report_type == "citizens":
        show_citizens_report(citizen_model)
    elif report_type == "meetings":
        show_meetings_report(meeting_model)
    elif report_type == "points":
        show_points_report(points_model)
    elif report_type == "sms":
        show_sms_report(sms_model)
    elif report_type == "analytics":
        show_analytics_report(citizen_model, meeting_model, points_model)
    elif report_type == "comprehensive":
        show_comprehensive_report(citizen_model, meeting_model, points_model, sms_model)


def show_reports_dashboard(
    citizen_model: CitizenModel,
    meeting_model: MeetingModel,
    points_model: PointsModel,
    sms_model: SMSModel
):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –æ—Ç—á–µ—Ç–æ–≤ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    st.markdown("### üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_citizens = citizen_model.count("is_active = 1")
        st.metric("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω", total_citizens)
        
        # –†–æ—Å—Ç –∑–∞ –º–µ—Å—è—Ü
        new_citizens = citizen_model.count("is_active = 1 AND created_at >= date('now', '-30 days')")
        st.metric("‚ûï –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü", new_citizens)
    
    with col2:
        total_meetings = meeting_model.count()
        st.metric("üèõÔ∏è –í—Å–µ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏–π", total_meetings)
        
        completed_meetings = meeting_model.count("status = 'COMPLETED'")
        completion_rate = (completed_meetings / total_meetings * 100) if total_meetings > 0 else 0
        st.metric("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", f"{completion_rate:.1f}%")
    
    with col3:
        total_points = points_model.count()
        st.metric("‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–∏–π –±–∞–ª–ª–æ–≤", total_points)
        
        monthly_points = points_model.count("date_earned >= date('now', '-30 days')")
        st.metric("üìà –ó–∞ –º–µ—Å—è—Ü", monthly_points)
    
    with col4:
        total_sms = sms_model.count()
        st.metric("üì± SMS –∫–∞–º–ø–∞–Ω–∏–π", total_sms)
        
        monthly_sms = sms_model.count("created_at >= date('now', '-30 days')")
        st.metric("üì§ –ó–∞ –º–µ—Å—è—Ü", monthly_sms)
    
    st.markdown("---")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π
        st.markdown("#### üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π")
        
        attendance_data = get_attendance_trend_data(meeting_model)
        
        if attendance_data:
            df_attendance = pd.DataFrame(attendance_data)
            
            fig = px.line(
                df_attendance,
                x='date',
                y='attendance_rate',
                title="–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–π (%)",
                markers=True
            )
            
            fig.update_layout(
                yaxis_title="–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (%)",
                xaxis_title="–î–∞—Ç–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞–∂–¥–∞–Ω (–±–∞–ª–ª—ã)
        st.markdown("#### ‚≠ê –î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")
        
        points_trend_data = get_points_trend_data(points_model)
        
        if points_trend_data:
            df_points = pd.DataFrame(points_trend_data)
            
            fig = px.bar(
                df_points,
                x='date',
                y='points_awarded',
                title="–ë–∞–ª–ª—ã –ø–æ –¥–Ω—è–º"
            )
            
            fig.update_layout(
                yaxis_title="–ë–∞–ª–ª—ã",
                xaxis_title="–î–∞—Ç–∞"
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
    st.markdown("---")
    st.markdown("#### üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    recent_events = get_recent_system_events(citizen_model, meeting_model, points_model, sms_model)
    
    if recent_events:
        df_events = pd.DataFrame(recent_events)
        
        st.dataframe(
            df_events,
            column_config={
                "date": st.column_config.DatetimeColumn("–î–∞—Ç–∞"),
                "type": st.column_config.TextColumn("–¢–∏–ø"),
                "description": st.column_config.TextColumn("–û–ø–∏—Å–∞–Ω–∏–µ"),
                "details": st.column_config.TextColumn("–î–µ—Ç–∞–ª–∏")
            },
            use_container_width=True,
            hide_index=True
        )
    else:
        st.info("üì≠ –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π")


def show_citizens_report(citizen_model: CitizenModel):
    """–û—Ç—á–µ—Ç –ø–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º"""
    
    st.markdown("### üë• –û—Ç—á–µ—Ç –ø–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º")
    
    # –§–∏–ª—å—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        include_inactive = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
        
        age_filter = st.selectbox(
            "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
            ["–í—Å–µ", "–î–æ 18", "18-30", "31-50", "51-70", "70+"]
        )
    
    with col2:
        points_filter = st.selectbox(
            "–ü–æ –±–∞–ª–ª–∞–º",
            ["–í—Å–µ", "–ë–µ–∑ –±–∞–ª–ª–æ–≤", "1-50", "51-100", "100+"]
        )
        
        phone_filter = st.checkbox("–¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏")
    
    with col3:
        export_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ["–ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", "Excel", "CSV", "PDF –æ—Ç—á–µ—Ç"]
        )
        
        sort_by = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
            ["–ü–æ –§–ò–û", "–ü–æ –±–∞–ª–ª–∞–º", "–ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"]
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", use_container_width=True, type="primary"):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        where_conditions = []
        params = []
        
        if not include_inactive:
            where_conditions.append("is_active = 1")
        
        if phone_filter:
            where_conditions.append("phone IS NOT NULL AND phone != ''")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        where_clause = " AND ".join(where_conditions) if where_conditions else ""
        citizens = citizen_model.get_all(where_clause, tuple(params), "full_name")
        
        if not citizens:
            st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞–∂–¥–∞–Ω: {len(citizens)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç—á–µ—Ç–∞
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üë• –í—Å–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω", len(citizens))
        
        with col2:
            with_phones = sum(1 for c in citizens if c['phone'])
            st.metric("üì± –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", with_phones)
        
        with col3:
            with_points = sum(1 for c in citizens if c['total_points'] and c['total_points'] > 0)
            st.metric("‚≠ê –° –±–∞–ª–ª–∞–º–∏", with_points)
        
        with col4:
            total_points = sum(c['total_points'] or 0 for c in citizens)
            st.metric("üèÜ –û–±—â–∏–µ –±–∞–ª–ª—ã", total_points)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            age_distribution = calculate_age_distribution(citizens)
            if age_distribution:
                fig = px.pie(
                    values=list(age_distribution.values()),
                    names=list(age_distribution.keys()),
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–ª–ª–∞–º
            points_distribution = calculate_points_distribution(citizens)
            if points_distribution:
                fig = px.bar(
                    x=list(points_distribution.keys()),
                    y=list(points_distribution.values()),
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–ª–ª–∞–º"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.markdown("#### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        df_citizens = pd.DataFrame([dict(c) for c in citizens])
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        column_mapping = {
            'full_name': '–§–ò–û',
            'birth_date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
            'address': '–ê–¥—Ä–µ—Å',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'total_points': '–ë–∞–ª–ª—ã',
            'registration_date': '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        }
        
        display_columns = ['–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ê–¥—Ä–µ—Å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ë–∞–ª–ª—ã']
        df_display = df_citizens.rename(columns=column_mapping)[display_columns]
        
        st.dataframe(df_display, use_container_width=True, hide_index=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        if export_format != "–ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å":
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if export_format == "Excel":
                create_excel_download_button(
                    df_display,
                    f"–æ—Ç—á–µ—Ç_–≥—Ä–∞–∂–¥–∞–Ω–µ_{timestamp}.xlsx",
                    "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (Excel)"
                )
            elif export_format == "CSV":
                csv_data = df_display.to_csv(index=False, encoding='utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (CSV)",
                    data=csv_data,
                    file_name=f"–æ—Ç—á–µ—Ç_–≥—Ä–∞–∂–¥–∞–Ω–µ_{timestamp}.csv",
                    mime="text/csv"
                )
            elif export_format == "PDF –æ—Ç—á–µ—Ç":
                pdf_report = generate_citizens_pdf_report(citizens, age_distribution, points_distribution)
                if pdf_report:
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
                        data=pdf_report,
                        file_name=f"–æ—Ç—á–µ—Ç_–≥—Ä–∞–∂–¥–∞–Ω–µ_{timestamp}.pdf",
                        mime="application/pdf"
                    )


def show_meetings_report(meeting_model: MeetingModel):
    """–û—Ç—á–µ—Ç –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º"""
    
    st.markdown("### üèõÔ∏è –û—Ç—á–µ—Ç –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        date_from = st.date_input(
            "–î–∞—Ç–∞ –æ—Ç",
            value=date.today() - timedelta(days=90),
            help="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞"
        )
        
        date_to = st.date_input(
            "–î–∞—Ç–∞ –¥–æ",
            value=date.today(),
            help="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞"
        )
    
    with col2:
        status_filter = st.multiselect(
            "–°—Ç–∞—Ç—É—Å –∑–∞—Å–µ–¥–∞–Ω–∏–π",
            ["PLANNED", "COMPLETED", "CANCELLED"],
            default=["COMPLETED"],
            format_func=lambda x: {
                "PLANNED": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
                "COMPLETED": "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", 
                "CANCELLED": "–û—Ç–º–µ–Ω–µ–Ω–æ"
            }[x]
        )
        
        min_attendance = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (%)",
            0, 100, 0,
            help="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"
        )
    
    with col3:
        include_stats = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏", value=True)
        
        group_by = st.selectbox(
            "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞",
            ["–ù–µ—Ç", "–ü–æ –º–µ—Å—è—Ü–∞–º", "–ü–æ —Å—Ç–∞—Ç—É—Å—É"]
        )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", use_container_width=True, type="primary"):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        where_conditions = ["meeting_date BETWEEN ? AND ?"]
        params = [date_from.isoformat(), date_to.isoformat()]
        
        if status_filter:
            status_placeholders = ",".join(["?" for _ in status_filter])
            where_conditions.append(f"status IN ({status_placeholders})")
            params.extend(status_filter)
        
        where_clause = " AND ".join(where_conditions)
        meetings = meeting_model.get_all(where_clause, tuple(params), "meeting_date DESC")
        
        if not meetings:
            st.warning("üì≠ –ù–µ—Ç –∑–∞—Å–µ–¥–∞–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            return
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        if min_attendance > 0:
            filtered_meetings = []
            for meeting in meetings:
                if meeting['total_invited'] > 0:
                    attendance_rate = (meeting['attendance_count'] / meeting['total_invited']) * 100
                    if attendance_rate >= min_attendance:
                        filtered_meetings.append(meeting)
            meetings = filtered_meetings
        
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—Å–µ–¥–∞–Ω–∏–π: {len(meetings)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üèõÔ∏è –í—Å–µ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏–π", len(meetings))
        
        with col2:
            total_participants = sum(m['total_invited'] or 0 for m in meetings)
            st.metric("üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", total_participants)
        
        with col3:
            total_attended = sum(m['attendance_count'] or 0 for m in meetings)
            avg_attendance = (total_attended / total_participants * 100) if total_participants > 0 else 0
            st.metric("üìä –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", f"{avg_attendance:.1f}%")
        
        with col4:
            completed_count = sum(1 for m in meetings if m['status'] == 'COMPLETED')
            st.metric("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", completed_count)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        if include_stats and meetings:
            col1, col2 = st.columns(2)
            
            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º
                meeting_names = [m['title'][:20] + "..." if len(m['title']) > 20 else m['title'] for m in meetings]
                attendance_rates = [
                    (m['attendance_count'] / m['total_invited'] * 100) if m['total_invited'] > 0 else 0
                    for m in meetings
                ]
                
                fig = px.bar(
                    x=meeting_names,
                    y=attendance_rates,
                    title="–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º (%)"
                )
                fig.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_counts = {}
                for meeting in meetings:
                    status = meeting['status']
                    status_counts[status] = status_counts.get(status, 0) + 1
                
                status_names = {
                    'PLANNED': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                    'COMPLETED': '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ',
                    'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω–æ'
                }
                
                labels = [status_names.get(k, k) for k in status_counts.keys()]
                values = list(status_counts.values())
                
                fig = px.pie(
                    values=values,
                    names=labels,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.markdown("#### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏–π")
        
        df_meetings = pd.DataFrame([dict(m) for m in meetings])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        df_meetings['attendance_rate'] = df_meetings.apply(
            lambda row: (row['attendance_count'] / row['total_invited'] * 100) 
            if row['total_invited'] > 0 else 0, axis=1
        ).round(1)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        display_columns = {
            'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'meeting_date': '–î–∞—Ç–∞',
            'meeting_time': '–í—Ä–µ–º—è',
            'location': '–ú–µ—Å—Ç–æ',
            'status': '–°—Ç–∞—Ç—É—Å',
            'attendance_count': '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏',
            'total_invited': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ',
            'attendance_rate': '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å %'
        }
        
        df_display = df_meetings[list(display_columns.keys())].rename(columns=display_columns)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å—ã
        status_mapping = {
            'PLANNED': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            'COMPLETED': '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ',
            'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω–æ'
        }
        df_display['–°—Ç–∞—Ç—É—Å'] = df_display['–°—Ç–∞—Ç—É—Å'].map(status_mapping)
        
        st.dataframe(df_display, use_container_width=True, hide_index=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        create_excel_download_button(
            df_display,
            f"–æ—Ç—á–µ—Ç_–∑–∞—Å–µ–¥–∞–Ω–∏—è_{timestamp}.xlsx",
            "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º"
        )


def show_points_report(points_model: PointsModel):
    """–û—Ç—á–µ—Ç –ø–æ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤"""
    
    st.markdown("### ‚≠ê –û—Ç—á–µ—Ç –ø–æ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        report_period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞",
            [30, 90, 180, 365],
            format_func=lambda x: f"–ó–∞ {x} –¥–Ω–µ–π",
            index=1
        )
        
        top_count = st.selectbox(
            "–¢–æ–ø –≥—Ä–∞–∂–¥–∞–Ω",
            [10, 20, 50, 100],
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–∂–¥–∞–Ω –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"
        )
    
    with col2:
        activity_filter = st.multiselect(
            "–¢–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            ["meeting_attendance", "subbotnik", "community_work", "volunteer_work"],
            default=[],
            format_func=lambda x: {
                "meeting_attendance": "–ó–∞—Å–µ–¥–∞–Ω–∏—è",
                "subbotnik": "–°—É–±–±–æ—Ç–Ω–∏–∫–∏",
                "community_work": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
                "volunteer_work": "–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ"
            }.get(x, x)
        )
        
        min_points = st.number_input(
            "–ú–∏–Ω–∏–º—É–º –±–∞–ª–ª–æ–≤",
            min_value=0,
            value=0,
            help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥—Ä–∞–∂–¥–∞–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤"
        )
    
    with col3:
        include_details = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", value=True)
        
        export_charts = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —ç–∫—Å–ø–æ—Ä—Ç")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", use_container_width=True, type="primary"):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_stats = points_model.get_activity_statistics(report_period)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        leaderboard = points_model.get_leaderboard(limit=top_count, period_days=report_period)
        
        if min_points > 0:
            leaderboard = [
                citizen for citizen in leaderboard 
                if (citizen.get('total_points', 0) or citizen.get('period_points', 0)) >= min_points
            ]
        
        st.success(f"‚úÖ –û—Ç—á–µ—Ç –ø–æ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤ –∑–∞ {report_period} –¥–Ω–µ–π")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        totals = activity_stats.get('totals', {})
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", totals.get('total_activities', 0))
        
        with col2:
            st.metric("‚≠ê –ë–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ", totals.get('total_points_awarded', 0))
        
        with col3:
            st.metric("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω", totals.get('active_citizens_count', 0))
        
        with col4:
            avg_points = totals.get('avg_points_per_activity', 0)
            st.metric("üìà –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã", f"{avg_points:.1f}" if avg_points else "0")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        if include_details:
            col1, col2 = st.columns(2)
            
            with col1:
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º
                activity_data = activity_stats.get('by_activity_type', [])
                if activity_data:
                    st.markdown("#### üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º")
                    
                    activity_names = {
                        'meeting_attendance': '–ó–∞—Å–µ–¥–∞–Ω–∏—è',
                        'subbotnik': '–°—É–±–±–æ—Ç–Ω–∏–∫–∏',
                        'community_work': '–û–±—â. —Ä–∞–±–æ—Ç—ã',
                        'volunteer_work': '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ'
                    }
                    
                    df_activity = pd.DataFrame(activity_data)
                    df_activity['display_name'] = df_activity['activity_type'].map(
                        lambda x: activity_names.get(x, x)
                    )
                    
                    fig = px.pie(
                        df_activity,
                        values='total_points',
                        names='display_name',
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º"
                    )
                    st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # –¢–æ–ø –≥—Ä–∞–∂–¥–∞–Ω
                if leaderboard:
                    st.markdown("#### üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
                    
                    df_top = pd.DataFrame([dict(citizen) for citizen in leaderboard[:10]])
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –±–∞–ª–ª–∞–º–∏
                    points_column = 'total_points' if report_period is None else 'period_points'
                    if points_column not in df_top.columns:
                        points_column = 'total_points'  # fallback
                    
                    df_display = df_top[['full_name', points_column]].copy()
                    df_display.columns = ['–§–ò–û', '–ë–∞–ª–ª—ã']
                    df_display.index = range(1, len(df_display) + 1)
                    
                    st.dataframe(df_display, use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        if leaderboard:
            st.markdown("#### üìã –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥")
            
            df_leaderboard = pd.DataFrame([dict(citizen) for citizen in leaderboard])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            df_leaderboard['position'] = range(1, len(df_leaderboard) + 1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = ['position', 'full_name']
            column_config = {
                'position': '–ú–µ—Å—Ç–æ',
                'full_name': '–§–ò–û'
            }
            
            if report_period is None:
                display_columns.append('total_points')
                column_config['total_points'] = '–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤'
            else:
                display_columns.append('period_points')
                column_config['period_points'] = f'–ë–∞–ª–ª—ã –∑–∞ {report_period} –¥–Ω–µ–π'
            
            if 'activities_count' in df_leaderboard.columns:
                display_columns.append('activities_count')
                column_config['activities_count'] = '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
            
            df_display = df_leaderboard[display_columns].rename(columns=column_config)
            
            st.dataframe(df_display, use_container_width=True, hide_index=True)
            
            # –≠–∫—Å–ø–æ—Ä—Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            create_excel_download_button(
                df_display,
                f"–æ—Ç—á–µ—Ç_–±–∞–ª–ª—ã_{timestamp}.xlsx",
                "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –±–∞–ª–ª–∞–º"
            )
        else:
            st.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")


def show_sms_report(sms_model: SMSModel):
    """–û—Ç—á–µ—Ç –ø–æ SMS-—Ä–∞—Å—Å—ã–ª–∫–∞–º"""
    
    st.markdown("### üì± –û—Ç—á–µ—Ç –ø–æ SMS-—Ä–∞—Å—Å—ã–ª–∫–∞–º")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞",
            [7, 30, 90, 365],
            format_func=lambda x: f"–ó–∞ {x} –¥–Ω–µ–π",
            index=1
        )
        
        campaign_type = st.selectbox(
            "–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–π",
            ["–í—Å–µ", "–û–±—ã—á–Ω—ã–µ", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]
        )
    
    with col2:
        include_logs = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏", value=False)
        
        min_recipients = st.number_input(
            "–ú–∏–Ω–∏–º—É–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
            min_value=0,
            value=0,
            help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"
        )
    
    with col3:
        delivery_filter = st.selectbox(
            "–ü–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏",
            ["–í—Å–µ", "–í—ã—Å–æ–∫–∞—è (>90%)", "–°—Ä–µ–¥–Ω—è—è (50-90%)", "–ù–∏–∑–∫–∞—è (<50%)"]
        )
        
        export_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ["–ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", "Excel", "CSV"]
        )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", use_container_width=True, type="primary"):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        start_date = date.today() - timedelta(days=period)
        where_conditions = ["created_at >= ?"]
        params = [start_date.isoformat()]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        if campaign_type != "–í—Å–µ":
            type_map = {
                "–û–±—ã—á–Ω—ã–µ": "REGULAR",
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ": "EMERGENCY",
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è": "REMINDER"
            }
            sms_type = type_map.get(campaign_type)
            if sms_type:
                where_conditions.append("campaign_type = ?")
                params.append(sms_type)
        
        where_clause = " AND ".join(where_conditions)
        campaigns = sms_model.get_all(where_clause, tuple(params), "created_at DESC")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if min_recipients > 0:
            campaigns = [c for c in campaigns if (c['sent_count'] or 0) >= min_recipients]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏
        if delivery_filter != "–í—Å–µ":
            filtered_campaigns = []
            for campaign in campaigns:
                if campaign['sent_count'] and campaign['sent_count'] > 0:
                    delivery_rate = (campaign['delivered_count'] or 0) / campaign['sent_count'] * 100
                    
                    if delivery_filter == "–í—ã—Å–æ–∫–∞—è (>90%)" and delivery_rate > 90:
                        filtered_campaigns.append(campaign)
                    elif delivery_filter == "–°—Ä–µ–¥–Ω—è—è (50-90%)" and 50 <= delivery_rate <= 90:
                        filtered_campaigns.append(campaign)
                    elif delivery_filter == "–ù–∏–∑–∫–∞—è (<50%)" and delivery_rate < 50:
                        filtered_campaigns.append(campaign)
            campaigns = filtered_campaigns
        
        if not campaigns:
            st.warning("üì≠ –ù–µ—Ç SMS-–∫–∞–º–ø–∞–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            return
        
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        total_sent = sum(c['sent_count'] or 0 for c in campaigns)
        total_delivered = sum(c['delivered_count'] or 0 for c in campaigns)
        total_failed = sum(c['failed_count'] or 0 for c in campaigns)
        avg_delivery_rate = (total_delivered / total_sent * 100) if total_sent > 0 else 0
        
        with col1:
            st.metric("üì§ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π", len(campaigns))
        
        with col2:
            st.metric("üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SMS", total_sent)
        
        with col3:
            st.metric("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", total_delivered)
            st.metric("üìà –î–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç—å", f"{avg_delivery_rate:.1f}%")
        
        with col4:
            st.metric("‚ùå –û—à–∏–±–∫–∏", total_failed)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            type_stats = {}
            for campaign in campaigns:
                campaign_type = campaign['campaign_type']
                type_stats[campaign_type] = type_stats.get(campaign_type, 0) + 1
            
            if type_stats:
                type_names = {
                    'REGULAR': '–û–±—ã—á–Ω—ã–µ',
                    'EMERGENCY': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ',
                    'REMINDER': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
                }
                
                labels = [type_names.get(k, k) for k in type_stats.keys()]
                values = list(type_stats.values())
                
                fig = px.pie(
                    values=values,
                    names=labels,
                    title="–ö–∞–º–ø–∞–Ω–∏–∏ –ø–æ —Ç–∏–ø–∞–º"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º
            daily_stats = {}
            for campaign in campaigns:
                day = campaign['created_at'][:10]  # YYYY-MM-DD
                daily_stats[day] = daily_stats.get(day, 0) + (campaign['sent_count'] or 0)
            
            if daily_stats:
                df_daily = pd.DataFrame([
                    {'date': k, 'sms_count': v} for k, v in daily_stats.items()
                ])
                df_daily['date'] = pd.to_datetime(df_daily['date'])
                df_daily = df_daily.sort_values('date')
                
                fig = px.bar(
                    df_daily,
                    x='date',
                    y='sms_count',
                    title="SMS –ø–æ –¥–Ω—è–º"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.markdown("#### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π")
        
        df_campaigns = pd.DataFrame([dict(c) for c in campaigns])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏
        df_campaigns['delivery_rate'] = df_campaigns.apply(
            lambda row: (row['delivered_count'] / row['sent_count'] * 100) 
            if row['sent_count'] and row['sent_count'] > 0 else 0, axis=1
        ).round(1)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        display_columns = {
            'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'campaign_type': '–¢–∏–ø',
            'created_at': '–°–æ–∑–¥–∞–Ω–æ',
            'sent_count': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            'delivered_count': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
            'failed_count': '–û—à–∏–±–∫–∏',
            'delivery_rate': '–î–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç—å %'
        }
        
        df_display = df_campaigns[list(display_columns.keys())].rename(columns=display_columns)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã
        type_mapping = {
            'REGULAR': '–û–±—ã—á–Ω–∞—è',
            'EMERGENCY': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è',
            'REMINDER': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
        }
        df_display['–¢–∏–ø'] = df_display['–¢–∏–ø'].map(type_mapping)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        df_display['–°–æ–∑–¥–∞–Ω–æ'] = pd.to_datetime(df_display['–°–æ–∑–¥–∞–Ω–æ']).dt.strftime('%Y-%m-%d %H:%M')
        
        st.dataframe(df_display, use_container_width=True, hide_index=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        if export_format != "–ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å":
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if export_format == "Excel":
                create_excel_download_button(
                    df_display,
                    f"–æ—Ç—á–µ—Ç_sms_{timestamp}.xlsx",
                    "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ SMS"
                )
            else:  # CSV
                csv_data = df_display.to_csv(index=False, encoding='utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (CSV)",
                    data=csv_data,
                    file_name=f"–æ—Ç—á–µ—Ç_sms_{timestamp}.csv",
                    mime="text/csv"
                )


def show_analytics_report(citizen_model: CitizenModel, meeting_model: MeetingModel, points_model: PointsModel):
    """–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    st.markdown("### üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        analysis_period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞",
            [30, 90, 180, 365],
            format_func=lambda x: f"–ó–∞ {x} –¥–Ω–µ–π",
            index=2
        )
        
        focus_area = st.selectbox(
            "–§–æ–∫—É—Å –∞–Ω–∞–ª–∏–∑–∞",
            ["–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–π", "–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤", "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"]
        )
    
    with col2:
        include_trends = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", value=True)
        
        correlation_analysis = st.checkbox("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    with col3:
        export_analytics = st.checkbox("–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        detailed_charts = st.checkbox("–î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏", value=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if st.button("üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True, type="primary"):
        st.success(f"üîç –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {analysis_period} –¥–Ω–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        start_date = date.today() - timedelta(days=analysis_period)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä–∞–∂–¥–∞–Ω
            active_citizens = citizen_model.count("is_active = 1 AND total_points > 0")
            total_citizens = citizen_model.count("is_active = 1")
            activity_rate = (active_citizens / total_citizens * 100) if total_citizens > 0 else 0
            
            st.metric("üë• –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", f"{activity_rate:.1f}%")
            st.caption(f"{active_citizens} –∏–∑ {total_citizens} –≥—Ä–∞–∂–¥–∞–Ω")
        
        with col2:
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–π
            completed_meetings = meeting_model.count(
                f"status = 'COMPLETED' AND meeting_date >= '{start_date.isoformat()}'"
            )
            total_meetings = meeting_model.count(
                f"meeting_date >= '{start_date.isoformat()}'"
            )
            completion_rate = (completed_meetings / total_meetings * 100) if total_meetings > 0 else 0
            
            st.metric("üèõÔ∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–π", f"{completion_rate:.1f}%")
            st.caption(f"{completed_meetings} –∏–∑ {total_meetings} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        with col3:
            # –î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
            recent_points = points_model.count(f"date_earned >= '{start_date.isoformat()}'")
            points_per_day = recent_points / analysis_period if analysis_period > 0 else 0
            
            st.metric("‚≠ê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–±–∞–ª–ª—ã/–¥–µ–Ω—å)", f"{points_per_day:.1f}")
            st.caption(f"{recent_points} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥")
        
        if detailed_charts:
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
            st.markdown("---")
            
            if focus_area == "–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
                show_general_activity_analysis(citizen_model, meeting_model, points_model, analysis_period)
            elif focus_area == "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–π":
                show_attendance_analysis(meeting_model, analysis_period)
            elif focus_area == "–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤":
                show_points_analysis(points_model, analysis_period)
            elif focus_area == "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                show_comparative_analysis(citizen_model, meeting_model, points_model, analysis_period)
        
        if correlation_analysis:
            st.markdown("---")
            show_correlation_analysis(citizen_model, meeting_model, points_model)


def show_comprehensive_report(
    citizen_model: CitizenModel,
    meeting_model: MeetingModel,
    points_model: PointsModel,
    sms_model: SMSModel
):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ"""
    
    st.markdown("### üìÅ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    col1, col2 = st.columns(2)
    
    with col1:
        report_period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞",
            [30, 90, 180, 365],
            format_func=lambda x: f"–ó–∞ {x} –¥–Ω–µ–π",
            index=2
        )
        
        include_sections = st.multiselect(
            "–†–∞–∑–¥–µ–ª—ã –æ—Ç—á–µ—Ç–∞",
            ["–ì—Ä–∞–∂–¥–∞–Ω–µ", "–ó–∞—Å–µ–¥–∞–Ω–∏—è", "–ë–∞–ª–ª—ã", "SMS", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
            default=["–ì—Ä–∞–∂–¥–∞–Ω–µ", "–ó–∞—Å–µ–¥–∞–Ω–∏—è", "–ë–∞–ª–ª—ã", "SMS"]
        )
    
    with col2:
        report_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞",
            ["–í–µ–±-–æ—Ç—á–µ—Ç", "Excel-—Ñ–∞–π–ª", "PDF-–¥–æ–∫—É–º–µ–Ω—Ç"]
        )
        
        include_charts = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True)
        
        executive_summary = st.checkbox("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞", value=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    if st.button("üìä –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç", use_container_width=True, type="primary"):
        start_date = date.today() - timedelta(days=report_period)
        
        if executive_summary:
            st.markdown("---")
            st.markdown("## üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞")
            
            # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_citizens = citizen_model.count("is_active = 1")
                new_citizens = citizen_model.count(
                    f"is_active = 1 AND created_at >= '{start_date.isoformat()}'"
                )
                
                st.metric("üë• –ì—Ä–∞–∂–¥–∞–Ω", total_citizens, delta=f"+{new_citizens}")
            
            with col2:
                total_meetings = meeting_model.count(
                    f"meeting_date >= '{start_date.isoformat()}'"
                )
                completed = meeting_model.count(
                    f"meeting_date >= '{start_date.isoformat()}' AND status = 'COMPLETED'"
                )
                
                st.metric("üèõÔ∏è –ó–∞—Å–µ–¥–∞–Ω–∏–π", total_meetings, delta=f"{completed} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            with col3:
                total_points = points_model.count(
                    f"date_earned >= '{start_date.isoformat()}'"
                )
                
                st.metric("‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–∏–π", total_points)
            
            with col4:
                total_sms = sms_model.count(
                    f"created_at >= '{start_date.isoformat()}'"
                )
                
                st.metric("üì± SMS –∫–∞–º–ø–∞–Ω–∏–π", total_sms)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã –æ—Ç—á–µ—Ç–∞
        for section in include_sections:
            st.markdown("---")
            
            if section == "–ì—Ä–∞–∂–¥–∞–Ω–µ":
                generate_citizens_section(citizen_model, start_date, include_charts)
            elif section == "–ó–∞—Å–µ–¥–∞–Ω–∏—è":
                generate_meetings_section(meeting_model, start_date, include_charts)
            elif section == "–ë–∞–ª–ª—ã":
                generate_points_section(points_model, start_date, include_charts)
            elif section == "SMS":
                generate_sms_section(sms_model, start_date, include_charts)
            elif section == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
                generate_analytics_section(citizen_model, meeting_model, points_model, start_date)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
        if report_format != "–í–µ–±-–æ—Ç—á–µ—Ç":
            st.markdown("---")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if report_format == "Excel-—Ñ–∞–π–ª":
                # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
                st.success("üì• Excel –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç (Excel)",
                    data="Mock Excel data",
                    file_name=f"–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π_–æ—Ç—á–µ—Ç_{timestamp}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            
            elif report_format == "PDF-–¥–æ–∫—É–º–µ–Ω—Ç":
                st.success("üì• PDF –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç (PDF)",
                    data="Mock PDF data",
                    file_name=f"–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π_–æ—Ç—á–µ—Ç_{timestamp}.pdf",
                    mime="application/pdf"
                )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

def get_attendance_trend_data(meeting_model: MeetingModel) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    
    query = """
        SELECT 
            meeting_date as date,
            title,
            CASE WHEN total_invited > 0 
                 THEN (attendance_count * 100.0 / total_invited) 
                 ELSE 0 END as attendance_rate
        FROM meetings 
        WHERE status = 'COMPLETED' 
        AND meeting_date >= date('now', '-180 days')
        ORDER BY meeting_date
    """
    
    result = meeting_model.db.execute_query(query)
    return [dict(row) for row in result] if result else []


def get_points_trend_data(points_model: PointsModel) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    
    query = """
        SELECT 
            date_earned as date,
            SUM(points) as points_awarded,
            COUNT(*) as activities_count
        FROM citizen_points 
        WHERE date_earned >= date('now', '-30 days')
        GROUP BY date_earned
        ORDER BY date_earned
    """
    
    result = points_model.db.execute_query(query)
    return [dict(row) for row in result] if result else []


def get_recent_system_events(
    citizen_model: CitizenModel,
    meeting_model: MeetingModel,
    points_model: PointsModel,
    sms_model: SMSModel
) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    events = []
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–µ
    recent_citizens = citizen_model.get_all(
        "created_at >= date('now', '-7 days')",
        order_by="created_at DESC"
    )[:5]
    
    for citizen in recent_citizens:
        events.append({
            'date': citizen['created_at'],
            'type': 'üë• –ì—Ä–∞–∂–¥–∞–Ω–µ',
            'description': f"–î–æ–±–∞–≤–ª–µ–Ω –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω: {citizen['full_name']}",
            'details': f"–ê–¥—Ä–µ—Å: {citizen['address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        })
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è
    recent_meetings = meeting_model.get_all(
        "created_at >= date('now', '-7 days')",
        order_by="created_at DESC"
    )[:5]
    
    for meeting in recent_meetings:
        events.append({
            'date': meeting['created_at'],
            'type': 'üèõÔ∏è –ó–∞—Å–µ–¥–∞–Ω–∏—è',
            'description': f"–°–æ–∑–¥–∞–Ω–æ –∑–∞—Å–µ–¥–∞–Ω–∏–µ: {meeting['title']}",
            'details': f"–î–∞—Ç–∞: {format_date(meeting['meeting_date'])}"
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    events.sort(key=lambda x: x['date'], reverse=True)
    
    return events[:10]


def calculate_age_distribution(citizens: List[Dict]) -> Dict[str, int]:
    """–†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    
    distribution = {
        "–î–æ 18": 0,
        "18-30": 0,
        "31-50": 0,
        "51-70": 0,
        "70+": 0
    }
    
    today = date.today()
    
    for citizen in citizens:
        if citizen['birth_date']:
            try:
                birth_date = datetime.strptime(citizen['birth_date'], '%Y-%m-%d').date()
                age = today.year - birth_date.year
                
                if age < 18:
                    distribution["–î–æ 18"] += 1
                elif 18 <= age <= 30:
                    distribution["18-30"] += 1
                elif 31 <= age <= 50:
                    distribution["31-50"] += 1
                elif 51 <= age <= 70:
                    distribution["51-70"] += 1
                else:
                    distribution["70+"] += 1
            except:
                pass
    
    return distribution


def calculate_points_distribution(citizens: List[Dict]) -> Dict[str, int]:
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –±–∞–ª–ª–∞–º"""
    
    distribution = {
        "0 –±–∞–ª–ª–æ–≤": 0,
        "1-50": 0,
        "51-100": 0,
        "100+": 0
    }
    
    for citizen in citizens:
        points = citizen['total_points'] or 0
        
        if points == 0:
            distribution["0 –±–∞–ª–ª–æ–≤"] += 1
        elif 1 <= points <= 50:
            distribution["1-50"] += 1
        elif 51 <= points <= 100:
            distribution["51-100"] += 1
        else:
            distribution["100+"] += 1
    
    return distribution


def create_backup(db: DatabaseManager):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        backup_path = db.backup_database()
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        with open(backup_path, 'rb') as f:
            backup_data = f.read()
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
            data=backup_data,
            file_name=f"backup_mahalla_{timestamp}.db",
            mime="application/octet-stream"
        )
        
        show_success_message("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        show_error_message(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")


def generate_citizens_pdf_report(citizens, age_distribution, points_distribution):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –ø–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    return b"Mock PDF content for citizens report"


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π

def show_general_activity_analysis(citizen_model, meeting_model, points_model, period):
    """–ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    st.markdown("#### üìä –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    st.info("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")


def show_attendance_analysis(meeting_model, period):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    st.markdown("#### üèõÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π")
    st.info("–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π")


def show_points_analysis(points_model, period):
    """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
    st.markdown("#### ‚≠ê –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤")
    st.info("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–æ—â—Ä–µ–Ω–∏–π")


def show_comparative_analysis(citizen_model, meeting_model, points_model, period):
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    st.markdown("#### üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    st.info("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")


def show_correlation_analysis(citizen_model, meeting_model, points_model):
    """–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    st.markdown("#### üî¨ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    st.info("–ê–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏")


def generate_citizens_section(citizen_model, start_date, include_charts):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º"""
    st.markdown("## üë• –†–∞–∑–¥–µ–ª: –ì—Ä–∞–∂–¥–∞–Ω–µ")
    st.info("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞–∂–¥–∞–Ω–∞—Ö –º–∞—Ö–∞–ª–ª–∏")


def generate_meetings_section(meeting_model, start_date, include_charts):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º"""
    st.markdown("## üèõÔ∏è –†–∞–∑–¥–µ–ª: –ó–∞—Å–µ–¥–∞–Ω–∏—è")
    st.info("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏—è—Ö")


def generate_points_section(points_model, start_date, include_charts):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ –±–∞–ª–ª–∞–º"""
    st.markdown("## ‚≠ê –†–∞–∑–¥–µ–ª: –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤")
    st.info("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø–æ–æ—â—Ä–µ–Ω–∏–π")


def generate_sms_section(sms_model, start_date, include_charts):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ SMS"""
    st.markdown("## üì± –†–∞–∑–¥–µ–ª: SMS-—Ä–∞—Å—Å—ã–ª–∫–∏")
    st.info("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SMS-–∫–∞–º–ø–∞–Ω–∏—è—Ö")


def generate_analytics_section(citizen_model, meeting_model, points_model, start_date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    st.markdown("## üìà –†–∞–∑–¥–µ–ª: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    st.info("–£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    