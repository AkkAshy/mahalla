"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è–º–∏ –º–∞—Ö–∞–ª–ª–∏
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any

from config.database import DatabaseManager
from models.meeting import MeetingModel
from models.citizen import CitizenModel
from models.points import PointsModel
from utils.helpers import (
    format_date, format_datetime, Paginator,
    create_excel_download_button, show_success_message, show_error_message
)
from utils.auth import get_current_user_id, has_permission
from utils.validators import validate_meeting_data, StreamlitValidationHelper

def show_meetings_page():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—Å–µ–¥–∞–Ω–∏–π"""
    
    st.markdown("# üèõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º–∏")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission('meetings'):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    db = DatabaseManager()
    meeting_model = MeetingModel(db)
    citizen_model = CitizenModel(db)
    points_model = PointsModel(db)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    with st.sidebar:
        st.markdown("### üîß –î–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–µ", use_container_width=True):
            st.session_state.meeting_action = "add"
        
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            st.session_state.meeting_action = "stats"
        
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
            st.session_state.meeting_action = "export"
        
        st.markdown("---")
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.markdown("### üîç –§–∏–ª—å—Ç—Ä—ã")
        
        search_term = st.text_input(
            "–ü–æ–∏—Å–∫",
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è...",
            help="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –º–µ—Å—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤–µ—Å—Ç–∫–µ –¥–Ω—è"
        )
        
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["–í—Å–µ", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"],
            help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞—Å–µ–¥–∞–Ω–∏—è"
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        date_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ", "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ", "–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª", "–ó–∞ –≥–æ–¥"],
            help="–§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    action = st.session_state.get('meeting_action', 'list')
    
    if action == "add":
        show_add_meeting_form(meeting_model)
    elif action == "edit":
        meeting_id = st.session_state.get('edit_meeting_id')
        if meeting_id:
            show_edit_meeting_form(meeting_model, meeting_id)
        else:
            st.error("ID –∑–∞—Å–µ–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            st.session_state.meeting_action = "list"
    elif action == "attendance":
        meeting_id = st.session_state.get('attendance_meeting_id')
        if meeting_id:
            show_attendance_management(meeting_model, citizen_model, points_model, meeting_id)
        else:
            st.error("ID –∑–∞—Å–µ–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            st.session_state.meeting_action = "list"
    elif action == "stats":
        show_meetings_statistics(meeting_model)
    elif action == "export":
        handle_meetings_export(meeting_model)
    else:
        show_meetings_list(meeting_model, search_term, status_filter, date_filter)


def show_meetings_list(
    meeting_model: MeetingModel,
    search_term: str,
    status_filter: str,
    date_filter: str
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown("### üìã –°–ø–∏—Å–æ–∫ –∑–∞—Å–µ–¥–∞–Ω–∏–π")
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.rerun()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
    where_conditions = []
    params = []
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    if search_term:
        search_conditions = [
            "UPPER(title) LIKE UPPER(?)",
            "UPPER(location) LIKE UPPER(?)",
            "UPPER(agenda) LIKE UPPER(?)"
        ]
        where_conditions.append(f"({' OR '.join(search_conditions)})")
        search_param = f"%{search_term}%"
        params.extend([search_param] * 3)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status_filter != "–í—Å–µ":
        status_map = {
            "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ": "PLANNED",
            "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ": "COMPLETED",
            "–û—Ç–º–µ–Ω–µ–Ω–æ": "CANCELLED"
        }
        status = status_map.get(status_filter)
        if status:
            where_conditions.append("status = ?")
            params.append(status)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    date_condition = get_date_filter_condition(date_filter)
    if date_condition:
        where_conditions.append(date_condition)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    where_clause = " AND ".join(where_conditions) if where_conditions else ""
    meetings = meeting_model.get_all(where_clause, tuple(params), "meeting_date DESC")
    
    if not meetings:
        st.info("üèõÔ∏è –ó–∞—Å–µ–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—Å–µ–¥–∞–Ω–∏–π: {len(meetings)}")
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(meetings, items_per_page=10)
    current_page = paginator.show_pagination_controls("meetings_pagination")
    page_meetings = paginator.get_page(current_page)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Å–µ–¥–∞–Ω–∏–π
    for meeting in page_meetings:
        show_meeting_card(meeting, meeting_model)


def show_meeting_card(meeting: Dict[str, Any], meeting_model: MeetingModel):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—Å–µ–¥–∞–Ω–∏—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
    status_colors = {
        'PLANNED': '#2196F3',    # –°–∏–Ω–∏–π
        'COMPLETED': '#4CAF50',  # –ó–µ–ª–µ–Ω—ã–π
        'CANCELLED': '#F44336'   # –ö—Ä–∞—Å–Ω—ã–π
    }
    
    status_names = {
        'PLANNED': 'üîµ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
        'COMPLETED': '‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ',
        'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
    }
    
    status = meeting['status']
    status_color = status_colors.get(status, '#999999')
    status_name = status_names.get(status, status)
    
    with st.container():
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"### {meeting['title']}")
            
            meeting_date = format_date(meeting['meeting_date'], 'long')
            meeting_time = meeting['meeting_time'] or "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            st.markdown(f"üìÖ **{meeting_date}** –≤ **{meeting_time}**")
            
            if meeting['location']:
                st.markdown(f"üìç {meeting['location']}")
        
        with col2:
            st.markdown(f"""
            <div style="
                background-color: {status_color};
                color: white;
                padding: 8px 16px;
                border-radius: 20px;
                text-align: center;
                font-weight: bold;
                margin: 10px 0;
            ">
                {status_name}
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            # –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
            if meeting['total_invited'] > 0:
                attendance_rate = (meeting['attendance_count'] / meeting['total_invited']) * 100
                st.metric(
                    "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å",
                    f"{meeting['attendance_count']}/{meeting['total_invited']}",
                    delta=f"{attendance_rate:.1f}%"
                )
            else:
                st.metric("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", "0/0", delta="0%")
        
        # –ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è
        if meeting['agenda']:
            with st.expander("üìã –ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è"):
                st.write(meeting['agenda'])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{meeting['id']}"):
                st.session_state.meeting_action = "edit"
                st.session_state.edit_meeting_id = meeting['id']
                st.rerun()
        
        with col2:
            if st.button("üë• –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", key=f"attendance_{meeting['id']}"):
                st.session_state.meeting_action = "attendance"
                st.session_state.attendance_meeting_id = meeting['id']
                st.rerun()
        
        with col3:
            if status == 'PLANNED':
                if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", key=f"complete_{meeting['id']}"):
                    success = meeting_model.complete_meeting(meeting['id'])
                    if success:
                        show_success_message("–ó–∞—Å–µ–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ")
                        st.rerun()
                    else:
                        show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—Å–µ–¥–∞–Ω–∏—è")
        
        with col4:
            if status == 'PLANNED':
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_{meeting['id']}"):
                    success = meeting_model.cancel_meeting(meeting['id'], "–û—Ç–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
                    if success:
                        show_success_message("–ó–∞—Å–µ–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        st.rerun()
                    else:
                        show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è")
        
        with col5:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{meeting['id']}"):
                if st.session_state.get(f"confirm_delete_meeting_{meeting['id']}"):
                    success = meeting_model.delete(meeting['id'])
                    if success:
                        show_success_message("–ó–∞—Å–µ–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                        st.rerun()
                    else:
                        show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—Å–µ–¥–∞–Ω–∏—è")
                else:
                    st.session_state[f"confirm_delete_meeting_{meeting['id']}"] = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        st.markdown("---")


def show_add_meeting_form(meeting_model: MeetingModel):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è"""
    
    st.markdown("### ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.meeting_action = "list"
            st.rerun()
    
    with st.form("add_meeting_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            title = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è *",
                placeholder="–û–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –∂–∏—Ç–µ–ª–µ–π –º–∞—Ö–∞–ª–ª–∏",
                help="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
            
            meeting_date = st.date_input(
                "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è *",
                value=date.today() + timedelta(days=7),
                min_value=date.today(),
                help="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
            
            meeting_time = st.time_input(
                "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
                value=datetime.strptime("10:00", "%H:%M").time(),
                help="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
            
            location = st.text_input(
                "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
                placeholder="–ó–¥–∞–Ω–∏–µ –º–∞—Ö–∞–ª–ª–∏, –∑–∞–ª –∑–∞—Å–µ–¥–∞–Ω–∏–π",
                help="–ê–¥—Ä–µ—Å –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
            )
        
        with col2:
            agenda = st.text_area(
                "–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è *",
                placeholder="1. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n2. –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü\n3. –†–∞–∑–Ω–æ–µ",
                height=200,
                help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
        
        submitted = st.form_submit_button("üìÖ –°–æ–∑–¥–∞—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–µ", use_container_width=True)
        
        if submitted:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            meeting_data = {
                'title': title.strip() if title else '',
                'meeting_date': meeting_date,
                'meeting_time': meeting_time.strftime("%H:%M") if meeting_time else None,
                'location': location.strip() if location else '',
                'agenda': agenda.strip() if agenda else ''
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if StreamlitValidationHelper.validate_and_show(meeting_data, validate_meeting_data):
                # –°–æ–∑–¥–∞–µ–º –∑–∞—Å–µ–¥–∞–Ω–∏–µ
                meeting_id = meeting_model.create_meeting(
                    title=meeting_data['title'],
                    meeting_date=meeting_data['meeting_date'],
                    meeting_time=meeting_data['meeting_time'],
                    location=meeting_data['location'],
                    agenda=meeting_data['agenda'],
                    created_by=get_current_user_id()
                )
                
                if meeting_id:
                    show_success_message(f"–ó–∞—Å–µ–¥–∞–Ω–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                    st.session_state.meeting_action = "list"
                    st.rerun()
                else:
                    show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—Å–µ–¥–∞–Ω–∏—è")


def show_edit_meeting_form(meeting_model: MeetingModel, meeting_id: int):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è"""
    
    st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è
    meeting = meeting_model.get_by_id(meeting_id)
    if not meeting:
        st.error("–ó–∞—Å–µ–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        st.session_state.meeting_action = "list"
        return
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.meeting_action = "list"
            st.rerun()
    
    with col2:
        st.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {meeting['title']}")
    
    with st.form("edit_meeting_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            title = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è *",
                value=meeting['title'],
                help="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
            
            current_date = datetime.strptime(meeting['meeting_date'], '%Y-%m-%d').date()
            meeting_date = st.date_input(
                "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è *",
                value=current_date,
                help="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
            
            current_time = None
            if meeting['meeting_time']:
                try:
                    current_time = datetime.strptime(meeting['meeting_time'], '%H:%M').time()
                except:
                    pass
            
            meeting_time = st.time_input(
                "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
                value=current_time or datetime.strptime("10:00", "%H:%M").time(),
                help="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
            
            location = st.text_input(
                "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
                value=meeting['location'] or '',
                help="–ê–¥—Ä–µ—Å –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
            )
        
        with col2:
            agenda = st.text_area(
                "–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è *",
                value=meeting['agenda'] or '',
                height=200,
                help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è –∑–∞—Å–µ–¥–∞–Ω–∏—è"
            )
        
        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
        
        if submitted:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {
                'title': title.strip(),
                'meeting_date': meeting_date,
                'meeting_time': meeting_time.strftime("%H:%M"),
                'location': location.strip(),
                'agenda': agenda.strip()
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if StreamlitValidationHelper.validate_and_show(update_data, validate_meeting_data):
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                success = meeting_model.update_meeting(meeting_id, **update_data)
                
                if success:
                    show_success_message("–ó–∞—Å–µ–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                    st.session_state.meeting_action = "list"
                    st.rerun()
                else:
                    show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—Å–µ–¥–∞–Ω–∏—è")


def show_attendance_management(
    meeting_model: MeetingModel,
    citizen_model: CitizenModel,
    points_model: PointsModel,
    meeting_id: int
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é –∑–∞—Å–µ–¥–∞–Ω–∏—è"""
    
    st.markdown("### üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è
    meeting_data = meeting_model.get_meeting_with_attendance(meeting_id)
    if not meeting_data:
        st.error("–ó–∞—Å–µ–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        st.session_state.meeting_action = "list"
        return
    
    meeting = meeting_data['meeting']
    attendance_list = meeting_data['attendance']
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.meeting_action = "list"
            st.rerun()
    
    with col2:
        st.info(f"–ó–∞—Å–µ–¥–∞–Ω–∏–µ: {meeting['title']} ({format_date(meeting['meeting_date'])})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    col1, col2, col3 = st.columns(3)
    
    total_citizens = len(attendance_list)
    present_count = sum(1 for a in attendance_list if a['is_present'])
    attendance_rate = (present_count / total_citizens * 100) if total_citizens > 0 else 0
    
    with col1:
        st.metric("üë• –í—Å–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω", total_citizens)
    
    with col2:
        st.metric("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", present_count)
    
    with col3:
        st.metric("üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", f"{attendance_rate:.1f}%")
    
    st.markdown("---")
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏"):
            mark_all_present(meeting_model, points_model, meeting_id, attendance_list)
            st.rerun()
    
    with col2:
        if st.button("‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏"):
            mark_all_absent(meeting_model, meeting_id, attendance_list)
            st.rerun()
    
    with col3:
        if st.button("üèÜ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º"):
            award_points_to_present(points_model, meeting_id, attendance_list)
            st.rerun()
    
    st.markdown("---")
    
    # –°–ø–∏—Å–æ–∫ –≥—Ä–∞–∂–¥–∞–Ω —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    st.markdown("### üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    # –§–∏–ª—å—Ç—Ä
    filter_option = st.selectbox(
        "–ü–æ–∫–∞–∑–∞—Ç—å:",
        ["–í—Å–µ—Ö", "–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö", "–¢–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö"]
    )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    filtered_attendance = attendance_list
    if filter_option == "–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö":
        filtered_attendance = [a for a in attendance_list if a['is_present']]
    elif filter_option == "–¢–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö":
        filtered_attendance = [a for a in attendance_list if not a['is_present']]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    for attendance in filtered_attendance:
        show_attendance_row(attendance, meeting_model, points_model, meeting_id)


def show_attendance_row(
    attendance: Dict[str, Any],
    meeting_model: MeetingModel,
    points_model: PointsModel,
    meeting_id: int
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ—Ç–∫–∏"""
    
    citizen_id = attendance['citizen_id']
    is_present = bool(attendance['is_present'])
    
    with st.container():
        col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
        
        with col1:
            st.write(f"**{attendance['full_name']}**")
            if attendance['phone']:
                st.caption(f"üìû {attendance['phone']}")
        
        with col2:
            # –°—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
            if is_present:
                st.success("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                st.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        with col3:
            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            button_text = "‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º" if is_present else "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º"
            if st.button(button_text, key=f"toggle_{citizen_id}"):
                toggle_attendance(meeting_model, meeting_id, citizen_id, not is_present)
                st.rerun()
        
        with col4:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–ª–∞—Ö
            if attendance['points_earned']:
                st.info(f"üèÜ {attendance['points_earned']} –±–∞–ª–ª–æ–≤")
            elif is_present:
                if st.button("üèÜ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", key=f"award_{citizen_id}"):
                    points_model.award_points(
                        citizen_id=citizen_id,
                        activity_type='meeting_attendance',
                        description=f"–ü–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è",
                        meeting_id=meeting_id,
                        created_by=get_current_user_id()
                    )
                    st.rerun()
        
        st.markdown("---")


def show_meetings_statistics(meeting_model: MeetingModel):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è–º"""
    
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–π")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.meeting_action = "list"
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = meeting_model.get_statistics()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üèõÔ∏è –í—Å–µ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏–π", stats.get('total_count', 0))
    
    with col2:
        st.metric("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ", stats.get('upcoming_meetings', 0))
    
    with col3:
        avg_attendance = stats.get('average_attendance_rate', 0)
        st.metric("üìä –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", f"{avg_attendance}%" if avg_attendance else "–ù/–î")
    
    with col4:
        st.metric("üìà –ó–∞ –º–µ—Å—è—Ü", stats.get('recent_meetings', 0))
    
    st.markdown("---")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = stats.get('by_status', {})
        if status_stats:
            st.markdown("#### üìã –ó–∞—Å–µ–¥–∞–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
            
            status_names = {
                'PLANNED': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                'COMPLETED': '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ',
                'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω–æ'
            }
            
            import plotly.express as px
            
            labels = [status_names.get(k, k) for k in status_stats.keys()]
            values = list(status_stats.values())
            
            fig = px.pie(
                values=values,
                names=labels,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π")
    
    with col2:
        # –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã
        st.markdown("#### üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è")
        
        monthly_data = get_monthly_meetings_data(meeting_model)
        if monthly_data:
            df = pd.DataFrame(monthly_data)
            
            import plotly.express as px
            fig = px.bar(
                df, x='month', y='count',
                title="–ó–∞—Å–µ–¥–∞–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º",
                labels={'month': '–ú–µ—Å—è—Ü', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏")


def handle_meetings_export(meeting_model: MeetingModel):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π"""
    
    st.markdown("### üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.meeting_action = "list"
            st.rerun()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    col1, col2 = st.columns(2)
    
    with col1:
        include_cancelled = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è",
            help="–í–∫–ª—é—á–∏—Ç—å –≤ —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è"
        )
        
        export_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ["Excel (.xlsx)", "CSV (.csv)"]
        )
    
    with col2:
        # –ü–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"]
        )
    
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è
        where_conditions = []
        params = []
        
        if not include_cancelled:
            where_conditions.append("status != 'CANCELLED'")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if period != "–í—Å–µ –≤—Ä–µ–º—è":
            period_condition = get_export_period_condition(period)
            if period_condition:
                where_conditions.append(period_condition)
        
        where_clause = " AND ".join(where_conditions) if where_conditions else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        meetings = meeting_model.get_all(where_clause, tuple(params), "meeting_date DESC")
        
        if not meetings:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        success = meeting_model.export_to_excel(
            f"–∑–∞—Å–µ–¥–∞–Ω–∏—è_–º–∞—Ö–∞–ª–ª–∏_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            include_cancelled
        )
        
        if success:
            st.success(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(meetings)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_date_filter_condition(date_filter: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ"""
    
    conditions = {
        "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ": "meeting_date >= date('now')",
        "–ó–∞ –º–µ—Å—è—Ü": "meeting_date >= date('now', '-30 days')",
        "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª": "meeting_date >= date('now', '-90 days')",
        "–ó–∞ –≥–æ–¥": "meeting_date >= date('now', '-365 days')"
    }
    
    return conditions.get(date_filter, "")


def get_export_period_condition(period: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    
    conditions = {
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥": "meeting_date >= date('now', '-365 days')",
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤": "meeting_date >= date('now', '-180 days')",
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü": "meeting_date >= date('now', '-30 days')"
    }
    
    return conditions.get(period, "")


def get_monthly_meetings_data(meeting_model: MeetingModel) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Å–µ–¥–∞–Ω–∏—è—Ö –ø–æ –º–µ—Å—è—Ü–∞–º"""
    
    query = """
        SELECT 
            strftime('%Y-%m', meeting_date) as month,
            COUNT(*) as count
        FROM meetings 
        WHERE meeting_date >= date('now', '-12 months')
        GROUP BY strftime('%Y-%m', meeting_date)
        ORDER BY month
    """
    
    result = meeting_model.db.execute_query(query)
    
    if result:
        data = []
        for row in result:
            month_str = row['month']
            try:
                month_date = datetime.strptime(month_str, '%Y-%m')
                month_name = month_date.strftime('%b %Y')
            except:
                month_name = month_str
            
            data.append({
                'month': month_name,
                'count': row['count']
            })
        
        return data
    
    return []


def toggle_attendance(meeting_model: MeetingModel, meeting_id: int, citizen_id: int, is_present: bool):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    query = """
        INSERT OR REPLACE INTO attendance (citizen_id, meeting_id, is_present)
        VALUES (?, ?, ?)
    """
    
    success = meeting_model.db.execute_query(query, (citizen_id, meeting_id, 1 if is_present else 0), fetch=False)
    
    if success is not None:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏—è
        meeting_model.update_attendance_count(meeting_id)
        
        status = "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º" if is_present else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º"
        show_success_message(f"–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {status}")
    else:
        show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")


def mark_all_present(meeting_model: MeetingModel, points_model: PointsModel, meeting_id: int, attendance_list: List[Dict]):
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –≥—Ä–∞–∂–¥–∞–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏"""
    
    for attendance in attendance_list:
        citizen_id = attendance['citizen_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        query = """
            INSERT OR REPLACE INTO attendance (citizen_id, meeting_id, is_present)
            VALUES (?, ?, 1)
        """
        meeting_model.db.execute_query(query, (citizen_id, meeting_id), fetch=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    meeting_model.update_attendance_count(meeting_id)
    show_success_message("–í—Å–µ –≥—Ä–∞–∂–¥–∞–Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ")


def mark_all_absent(meeting_model: MeetingModel, meeting_id: int, attendance_list: List[Dict]):
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –≥—Ä–∞–∂–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏"""
    
    for attendance in attendance_list:
        citizen_id = attendance['citizen_id']
        
        query = """
            INSERT OR REPLACE INTO attendance (citizen_id, meeting_id, is_present)
            VALUES (?, ?, 0)
        """
        meeting_model.db.execute_query(query, (citizen_id, meeting_id), fetch=False)
    
    meeting_model.update_attendance_count(meeting_id)
    show_success_message("–í—Å–µ –≥—Ä–∞–∂–¥–∞–Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ")


def award_points_to_present(points_model: PointsModel, meeting_id: int, attendance_list: List[Dict]):
    """–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –≤—Å–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º"""
    
    awarded_count = 0
    
    for attendance in attendance_list:
        if attendance['is_present'] and not attendance['points_earned']:
            citizen_id = attendance['citizen_id']
            
            point_id = points_model.award_points(
                citizen_id=citizen_id,
                activity_type='meeting_attendance',
                description="–ü–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è",
                meeting_id=meeting_id,
                created_by=get_current_user_id()
            )
            
            if point_id:
                awarded_count += 1
    
    if awarded_count > 0:
        show_success_message(f"–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã {awarded_count} –≥—Ä–∞–∂–¥–∞–Ω–∞–º")
    else:
        show_error_message("–ù–µ—Ç –≥—Ä–∞–∂–¥–∞–Ω –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")
        