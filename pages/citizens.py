"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∞–º–∏ –º–∞—Ö–∞–ª–ª–∏
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date
from typing import Optional, List, Dict, Any

from config.database import DatabaseManager
from models.citizen import CitizenModel
from utils.helpers import (
    format_phone, format_date, Paginator, 
    create_excel_download_button, show_success_message, show_error_message
)
from utils.auth import get_current_user_id, has_permission
from utils.validators import validate_citizen_data, StreamlitValidationHelper

def show_citizens_page():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä–∞–∂–¥–∞–Ω"""
    
    st.markdown("# üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∞–º–∏")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission('citizens'):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    db = DatabaseManager()
    citizen_model = CitizenModel(db)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    with st.sidebar:
        st.markdown("### üîß –î–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞", use_container_width=True):
            st.session_state.citizen_action = "add"
        
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            st.session_state.citizen_action = "stats"
        
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", use_container_width=True):
            st.session_state.citizen_action = "export"
        
        st.markdown("---")
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.markdown("### üîç –§–∏–ª—å—Ç—Ä—ã")
        
        search_term = st.text_input(
            "–ü–æ–∏—Å–∫", 
            placeholder="–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å...",
            help="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û, –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–¥—Ä–µ—Å—É –∏–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç—É"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"):
            age_filter = st.selectbox(
                "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
                ["–í—Å–µ", "–î–æ 18", "18-30", "31-50", "51-70", "70+"]
            )
            
            points_filter = st.selectbox(
                "–ü–æ –±–∞–ª–ª–∞–º",
                ["–í—Å–µ", "–ë–µ–∑ –±–∞–ª–ª–æ–≤", "1-50", "51-100", "100+"]
            )
            
            phone_filter = st.checkbox("–¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    action = st.session_state.get('citizen_action', 'list')
    
    if action == "add":
        show_add_citizen_form(citizen_model)
    elif action == "edit":
        citizen_id = st.session_state.get('edit_citizen_id')
        if citizen_id:
            show_edit_citizen_form(citizen_model, citizen_id)
        else:
            st.error("ID –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            st.session_state.citizen_action = "list"
    elif action == "stats":
        show_citizens_statistics(citizen_model)
    elif action == "export":
        handle_export(citizen_model)
    else:
        show_citizens_list(
            citizen_model, 
            search_term, 
            age_filter, 
            points_filter, 
            phone_filter
        )


def show_citizens_list(
    citizen_model: CitizenModel, 
    search_term: str, 
    age_filter: str, 
    points_filter: str, 
    phone_filter: bool
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä–∞–∂–¥–∞–Ω —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown("### üìã –°–ø–∏—Å–æ–∫ –≥—Ä–∞–∂–¥–∞–Ω")
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.rerun()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
    where_conditions = ["is_active = 1"]
    params = []
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    if search_term:
        search_conditions = [
            "UPPER(full_name) LIKE UPPER(?)",
            "phone LIKE ?",
            "UPPER(address) LIKE UPPER(?)",
            "UPPER(passport_data) LIKE UPPER(?)"
        ]
        where_conditions.append(f"({' OR '.join(search_conditions)})")
        search_param = f"%{search_term}%"
        params.extend([search_param] * 4)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if age_filter != "–í—Å–µ":
        age_condition = get_age_filter_condition(age_filter)
        if age_condition:
            where_conditions.append(age_condition)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –±–∞–ª–ª–∞–º
    if points_filter != "–í—Å–µ":
        points_condition = get_points_filter_condition(points_filter)
        if points_condition:
            where_conditions.append(points_condition)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º
    if phone_filter:
        where_conditions.append("phone IS NOT NULL AND phone != ''")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    where_clause = " AND ".join(where_conditions)
    citizens = citizen_model.get_all(where_clause, tuple(params), "full_name")
    
    if not citizens:
        st.info("üë• –ì—Ä–∞–∂–¥–∞–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞–∂–¥–∞–Ω: {len(citizens)}")
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(citizens, items_per_page=20)
    current_page = paginator.show_pagination_controls("citizens_pagination")
    page_citizens = paginator.get_page(current_page)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–∂–¥–∞–Ω
    for citizen in page_citizens:
        show_citizen_card(citizen, citizen_model)


def show_citizen_card(citizen: Dict[str, Any], citizen_model: CitizenModel):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"""
    
    with st.container():
        col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
        
        with col1:
            st.markdown(f"**{citizen['full_name']}**")
            
            if citizen['birth_date']:
                age = calculate_age(citizen['birth_date'])
                st.caption(f"üéÇ {format_date(citizen['birth_date'])} ({age} –ª–µ—Ç)")
            
            if citizen['address']:
                st.caption(f"üìç {citizen['address']}")
        
        with col2:
            if citizen['phone']:
                st.caption(f"üìû {format_phone(citizen['phone'])}")
            
            if citizen['passport_data']:
                st.caption(f"üÜî {citizen['passport_data']}")
        
        with col3:
            points = citizen['total_points'] or 0
            if points > 0:
                st.success(f"‚≠ê {points} –±–∞–ª–ª–æ–≤")
            else:
                st.info("0 –±–∞–ª–ª–æ–≤")
        
        with col4:
            if st.button("‚úèÔ∏è", key=f"edit_{citizen['id']}", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                st.session_state.citizen_action = "edit"
                st.session_state.edit_citizen_id = citizen['id']
                st.rerun()
            
            if st.button("üóëÔ∏è", key=f"delete_{citizen['id']}", help="–£–¥–∞–ª–∏—Ç—å"):
                if st.session_state.get(f"confirm_delete_{citizen['id']}"):
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                    success = citizen_model.deactivate_citizen(
                        citizen['id'], 
                        "–£–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
                    )
                    if success:
                        show_success_message("–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        st.rerun()
                    else:
                        show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")
                else:
                    st.session_state[f"confirm_delete_{citizen['id']}"] = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        st.markdown("---")


def show_add_citizen_form(citizen_model: CitizenModel):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"""
    
    st.markdown("### ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.citizen_action = "list"
            st.rerun()
    
    with col2:
        st.empty()
    
    with st.form("add_citizen_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input(
                "–§–ò–û *",
                placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                help="–ü–æ–ª–Ω–æ–µ –∏–º—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"
            )
            
            birth_date = st.date_input(
                "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                value=None,
                min_value=date(1920, 1, 1),
                max_value=date.today(),
                help="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"
            )
            
            phone = st.text_input(
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                placeholder="+998901234567",
                help="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )
        
        with col2:
            address = st.text_area(
                "–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
                placeholder="—É–ª. –ù–∞–≤–æ–∏, –¥–æ–º 123, –∫–≤. 45",
                help="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
                height=100
            )
            
            passport_data = st.text_input(
                "–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                placeholder="AB1234567",
                help="–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"
            )
            
            notes = st.text_area(
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏",
                placeholder="–õ—é–±–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                height=100
            )
        
        submitted = st.form_submit_button("üíæ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞", use_container_width=True)
        
        if submitted:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            citizen_data = {
                'full_name': full_name.strip() if full_name else '',
                'birth_date': birth_date,
                'address': address.strip() if address else '',
                'phone': phone.strip() if phone else '',
                'passport_data': passport_data.strip().upper() if passport_data else '',
                'notes': notes.strip() if notes else ''
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if StreamlitValidationHelper.validate_and_show(citizen_data, validate_citizen_data):
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
                citizen_id = citizen_model.add_citizen(
                    full_name=citizen_data['full_name'],
                    birth_date=citizen_data['birth_date'],
                    address=citizen_data['address'],
                    phone=citizen_data['phone'],
                    passport_data=citizen_data['passport_data'],
                    notes=citizen_data['notes']
                )
                
                if citizen_id:
                    show_success_message(f"–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.session_state.citizen_action = "list"
                    st.rerun()
                else:
                    show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")


def show_edit_citizen_form(citizen_model: CitizenModel, citizen_id: int):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"""
    
    st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
    citizen = citizen_model.get_by_id(citizen_id)
    if not citizen:
        st.error("–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.session_state.citizen_action = "list"
        return
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.citizen_action = "list"
            st.rerun()
    
    with col2:
        st.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {citizen['full_name']}")
    
    with st.form("edit_citizen_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            full_name = st.text_input(
                "–§–ò–û *",
                value=citizen['full_name'],
                help="–ü–æ–ª–Ω–æ–µ –∏–º—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"
            )
            
            current_birth_date = None
            if citizen['birth_date']:
                try:
                    current_birth_date = datetime.strptime(citizen['birth_date'], '%Y-%m-%d').date()
                except:
                    pass
            
            birth_date = st.date_input(
                "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                value=current_birth_date,
                min_value=date(1920, 1, 1),
                max_value=date.today(),
                help="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"
            )
            
            phone = st.text_input(
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                value=citizen['phone'] or '',
                help="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )
        
        with col2:
            address = st.text_area(
                "–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
                value=citizen['address'] or '',
                help="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
                height=100
            )
            
            passport_data = st.text_input(
                "–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                value=citizen['passport_data'] or '',
                help="–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"
            )
            
            notes = st.text_area(
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏",
                value=citizen['notes'] or '',
                height=100
            )
        
        col_save, col_delete = st.columns([3, 1])
        
        with col_save:
            submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
        
        with col_delete:
            delete_clicked = st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", use_container_width=True, type="secondary")
        
        if submitted:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {
                'full_name': full_name.strip(),
                'birth_date': birth_date,
                'address': address.strip(),
                'phone': phone.strip(),
                'passport_data': passport_data.strip().upper(),
                'notes': notes.strip()
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if StreamlitValidationHelper.validate_and_show(update_data, validate_citizen_data):
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                success = citizen_model.update_citizen(citizen_id, **update_data)
                
                if success:
                    show_success_message("–î–∞–Ω–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                    st.session_state.citizen_action = "list"
                    st.rerun()
                else:
                    show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        if delete_clicked:
            success = citizen_model.deactivate_citizen(
                citizen_id, 
                "–£–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            if success:
                show_success_message("–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                st.session_state.citizen_action = "list"
                st.rerun()
            else:
                show_error_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")


def show_citizens_statistics(citizen_model: CitizenModel):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º"""
    
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.citizen_action = "list"
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = citizen_model.get_statistics()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üë• –í—Å–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω", stats.get('active_count', 0))
    
    with col2:
        st.metric("üì± –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", stats.get('with_phones', 0))
    
    with col3:
        avg_age = stats.get('average_age', 0)
        st.metric("üìä –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç", f"{avg_age} –ª–µ—Ç" if avg_age else "–ù/–î")
    
    with col4:
        st.metric("üìà –ó–∞ –º–µ—Å—è—Ü", stats.get('recent_count', 0))
    
    st.markdown("---")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        age_groups = stats.get('age_groups', {})
        if age_groups:
            st.markdown("#### üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã")
            
            import plotly.express as px
            fig = px.pie(
                values=list(age_groups.values()),
                names=list(age_groups.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö")
    
    with col2:
        # –¢–æ–ø –ø–æ –±–∞–ª–ª–∞–º
        top_citizens = stats.get('top_by_points', [])
        if top_citizens:
            st.markdown("#### üèÜ –¢–æ–ø –ø–æ –±–∞–ª–ª–∞–º")
            
            df = pd.DataFrame(top_citizens)
            st.dataframe(
                df,
                column_config={
                    "full_name": "–§–ò–û",
                    "total_points": st.column_config.NumberColumn(
                        "–ë–∞–ª–ª—ã",
                        help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"
                    )
                },
                use_container_width=True
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–ª–∞—Ö –≥—Ä–∞–∂–¥–∞–Ω")


def handle_export(citizen_model: CitizenModel):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    st.markdown("### üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            st.session_state.citizen_action = "list"
            st.rerun()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    col1, col2 = st.columns(2)
    
    with col1:
        include_inactive = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω",
            help="–í–∫–ª—é—á–∏—Ç—å –≤ —ç–∫—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω"
        )
        
        export_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ["Excel (.xlsx)", "CSV (.csv)"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
        )
    
    with col2:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:**")
        include_notes = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", value=True)
        include_creation_date = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", value=True)
    
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        where_clause = "" if include_inactive else "is_active = 1"
        citizens = citizen_model.get_all(where_clause, order_by="full_name")
        
        if not citizens:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = citizen_model.to_dataframe(citizens)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_config = {
            'id': 'ID',
            'full_name': '–§–ò–û',
            'birth_date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
            'address': '–ê–¥—Ä–µ—Å',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'passport_data': '–ü–∞—Å–ø–æ—Ä—Ç',
            'registration_date': '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
            'total_points': '–ë–∞–ª–ª—ã',
            'is_active': '–ê–∫—Ç–∏–≤–µ–Ω'
        }
        
        if include_notes:
            columns_config['notes'] = '–ó–∞–º–µ—Ç–∫–∏'
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        export_columns = list(columns_config.keys())
        if not include_creation_date:
            export_columns.remove('registration_date')
            del columns_config['registration_date']
        
        df_export = df[export_columns].rename(columns=columns_config)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è' in df_export.columns:
            df_export['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'] = pd.to_datetime(df_export['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'], errors='coerce').dt.strftime('%Y-%m-%d')
        
        if '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' in df_export.columns:
            df_export['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'] = pd.to_datetime(df_export['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'], errors='coerce').dt.strftime('%Y-%m-%d')
        
        if '–ê–∫—Ç–∏–≤–µ–Ω' in df_export.columns:
            df_export['–ê–∫—Ç–∏–≤–µ–Ω'] = df_export['–ê–∫—Ç–∏–≤–µ–Ω'].map({1: '–î–∞', 0: '–ù–µ—Ç'})
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        if export_format.startswith("Excel"):
            filename = f"–≥—Ä–∞–∂–¥–∞–Ω–µ_–º–∞—Ö–∞–ª–ª–∏_{timestamp}.xlsx"
            create_excel_download_button(df_export, filename, "üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª")
        else:
            filename = f"–≥—Ä–∞–∂–¥–∞–Ω–µ_–º–∞—Ö–∞–ª–ª–∏_{timestamp}.csv"
            csv_data = df_export.to_csv(index=False, encoding='utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                data=csv_data,
                file_name=filename,
                mime="text/csv"
            )
        
        st.success(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df_export)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_age_filter_condition(age_filter: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
    
    age_conditions = {
        "–î–æ 18": "(julianday('now') - julianday(birth_date))/365.25 < 18",
        "18-30": "(julianday('now') - julianday(birth_date))/365.25 BETWEEN 18 AND 30",
        "31-50": "(julianday('now') - julianday(birth_date))/365.25 BETWEEN 31 AND 50", 
        "51-70": "(julianday('now') - julianday(birth_date))/365.25 BETWEEN 51 AND 70",
        "70+": "(julianday('now') - julianday(birth_date))/365.25 > 70"
    }
    
    return age_conditions.get(age_filter, "")


def get_points_filter_condition(points_filter: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±–∞–ª–ª–∞–º"""
    
    points_conditions = {
        "–ë–µ–∑ –±–∞–ª–ª–æ–≤": "total_points = 0",
        "1-50": "total_points BETWEEN 1 AND 50",
        "51-100": "total_points BETWEEN 51 AND 100",
        "100+": "total_points > 100"
    }
    
    return points_conditions.get(points_filter, "")


def calculate_age(birth_date_str: str) -> int:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    
    try:
        birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d').date()
        today = date.today()
        age = today.year - birth_date.year
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É
        if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
            age -= 1
        
        return age
    except:
        return 0