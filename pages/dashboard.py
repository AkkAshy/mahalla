"""
–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (Dashboard) —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
import pandas as pd
from typing import Dict, Any, List

from config.database import DatabaseManager
from models.citizen import CitizenModel
from models.meeting import MeetingModel
from models.points import PointsModel
from models.sms import SMSModel
from utils.helpers import create_metrics_row, create_pie_chart, create_bar_chart, format_date
from utils.auth import get_current_user

def safe_get(row_obj, key, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ sqlite3.Row –∏–ª–∏ dict"""
    try:
        if row_obj is None:
            return default
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if hasattr(row_obj, 'get'):
            return row_obj.get(key, default)
        # –ï—Å–ª–∏ —ç—Ç–æ sqlite3.Row
        elif hasattr(row_obj, '__getitem__'):
            try:
                return row_obj[key]
            except (KeyError, IndexError):
                return default
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        elif hasattr(row_obj, key):
            return getattr(row_obj, key, default)
        else:
            return default
    except (KeyError, AttributeError, IndexError, TypeError):
        return default

def row_to_dict(row):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ sqlite3.Row –≤ —Å–ª–æ–≤–∞—Ä—å"""
    if row is None:
        return {}
    try:
        return dict(row)
    except:
        try:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            result = {}
            if hasattr(row, 'keys'):
                for key in row.keys():
                    result[key] = row[key]
            return result
        except:
            return {}

def show_dashboard():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    
    st.markdown("# üìä –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    db = DatabaseManager()
    citizen_model = CitizenModel(db)
    meeting_model = MeetingModel(db)
    points_model = PointsModel(db)
    sms_model = SMSModel(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = get_current_user()
        user_name = safe_get(user, 'full_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') if user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    except:
        user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    current_time = datetime.now()
    if current_time.hour < 12:
        greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif current_time.hour < 18:
        greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    else:
        greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    
    st.markdown(f"## {greeting}, {user_name}! üëã")
    st.markdown(f"*–°–µ–≥–æ–¥–Ω—è: {format_date(date.today(), 'long')}*")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–∂–¥–∞–Ω
    with col1:
        try:
            total_citizens = citizen_model.count("is_active = 1")
        except:
            total_citizens = 0
        st.metric(
            label="üë• –í—Å–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω",
            value=total_citizens,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
        )
    
    # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è
    with col2:
        try:
            upcoming_meetings = meeting_model.count(
                "meeting_date >= date('now') AND status = 'PLANNED'"
            )
        except:
            upcoming_meetings = 0
        st.metric(
            label="üèõÔ∏è –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è",
            value=upcoming_meetings,
            help="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        )
    
    # SMS –∑–∞ –º–µ—Å—è—Ü
    with col3:
        try:
            start_month = date.today().replace(day=1)
            sms_count = sms_model.count(
                "created_at >= ?", (start_month.isoformat(),)
            )
        except:
            sms_count = 0
        st.metric(
            label="üì± SMS –∑–∞ –º–µ—Å—è—Ü",
            value=sms_count,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö SMS –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
        )
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ (—Å –±–∞–ª–ª–∞–º–∏)
    with col4:
        try:
            active_citizens = citizen_model.count(
                "is_active = 1 AND total_points > 0"
            )
        except:
            active_citizens = 0
        st.metric(
            label="‚≠ê –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ",
            value=active_citizens,
            help="–ì—Ä–∞–∂–¥–∞–Ω–µ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏"
        )
    
    st.markdown("---")
    
    # –ë–ª–æ–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    col_left, col_right = st.columns([2, 1])
    
    with col_left:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã
        st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
            attendance_data = get_attendance_dynamics(meeting_model)
            
            if attendance_data:
                df = pd.DataFrame(attendance_data)
                
                fig = px.line(
                    df, x='month', y='attendance_rate',
                    title="–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º (%)",
                    markers=True
                )
                
                fig.update_layout(
                    xaxis_title="–ú–µ—Å—è—Ü",
                    yaxis_title="–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (%)",
                    showlegend=False,
                    height=400
                )
                
                fig.update_traces(
                    hovertemplate="<b>%{x}</b><br>–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: %{y:.1f}%<extra></extra>"
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        except:
            st.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    with col_right:
        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω
        st.markdown("### üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
        
        try:
            top_citizens_raw = points_model.get_leaderboard(limit=5)
            
            if top_citizens_raw:
                for i, citizen_row in enumerate(top_citizens_raw, 1):
                    points = safe_get(citizen_row, 'total_points', safe_get(citizen_row, 'period_points', 0))
                    full_name = safe_get(citizen_row, 'full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    
                    with st.container():
                        st.markdown(f"""
                        <div style="
                            background: linear-gradient(45deg, #f8f9fa, #e3f2fd);
                            padding: 10px;
                            border-radius: 8px;
                            margin: 5px 0;
                            border-left: 4px solid {'#ffd700' if i == 1 else '#c0c0c0' if i == 2 else '#cd7f32' if i == 3 else '#dee2e6'};
                        ">
                            <b>{i}. {full_name}</b><br>
                            <small>üèÜ {points} –±–∞–ª–ª–æ–≤</small>
                        </div>
                        """, unsafe_allow_html=True)
            else:
                st.info("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
        except:
            st.info("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
    
    st.markdown("---")
    
    # –ë–ª–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    col1, col2 = st.columns(2)
    
    with col1:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
        st.markdown("### üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã")
        
        try:
            age_stats = citizen_model.get_age_statistics()
            
            if age_stats:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º age_stats
                if isinstance(age_stats, list) and age_stats:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ Row –æ–±—ä–µ–∫—Ç–æ–≤
                    age_data = {}
                    for row in age_stats:
                        keys = list(row.keys()) if hasattr(row, 'keys') else []
                        if len(keys) >= 2:
                            age_group = safe_get(row, keys[0], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            count = safe_get(row, keys[1], 0)
                            age_data[age_group] = count
                    age_stats = age_data
                
                if age_stats and isinstance(age_stats, dict):
                    fig = px.pie(
                        values=list(age_stats.values()),
                        names=list(age_stats.keys()),
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω")
            else:
                st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω")
        except:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω")
    
    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        st.markdown("### üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–π")
        
        try:
            meeting_stats = get_meeting_statistics(meeting_model)
            
            if meeting_stats:
                # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
                colors = {
                    'PLANNED': '#2196F3',    # –°–∏–Ω–∏–π
                    'COMPLETED': '#4CAF50',  # –ó–µ–ª–µ–Ω—ã–π  
                    'CANCELLED': '#F44336'   # –ö—Ä–∞—Å–Ω—ã–π
                }
                
                status_names = {
                    'PLANNED': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                    'COMPLETED': '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ',
                    'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω–æ'
                }
                
                labels = [status_names.get(k, k) for k in meeting_stats.keys()]
                values = list(meeting_stats.values())
                plot_colors = [colors.get(k, '#999999') for k in meeting_stats.keys()]
                
                fig = go.Figure(data=[go.Pie(
                    labels=labels,
                    values=values,
                    marker_colors=plot_colors,
                    hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
                )])
                
                fig.update_layout(
                    title="–ó–∞—Å–µ–¥–∞–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
                    showlegend=True,
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Å–µ–¥–∞–Ω–∏—è—Ö")
        except:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Å–µ–¥–∞–Ω–∏—è—Ö")
    
    # –ë–ª–æ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
    st.markdown("---")
    st.markdown("### üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üèõÔ∏è –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è")
        try:
            recent_meetings = meeting_model.get_all(
                "meeting_date >= date('now', '-30 days')",
                order_by="meeting_date DESC"
            )[:5]
            
            if recent_meetings:
                for meeting_row in recent_meetings:
                    status_colors = {
                        'PLANNED': 'üîµ',
                        'COMPLETED': '‚úÖ',
                        'CANCELLED': '‚ùå'
                    }
                    
                    status = safe_get(meeting_row, 'status', 'UNKNOWN')
                    status_icon = status_colors.get(status, '‚ö™')
                    title = safe_get(meeting_row, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    meeting_date_str = safe_get(meeting_row, 'meeting_date', '')
                    attendance_count = safe_get(meeting_row, 'attendance_count', 0)
                    total_invited = safe_get(meeting_row, 'total_invited', 0)
                    
                    try:
                        meeting_date = format_date(meeting_date_str) if meeting_date_str else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                    except:
                        meeting_date = str(meeting_date_str)
                    
                    st.markdown(f"""
                    <div style="
                        background: #f8f9fa;
                        padding: 10px;
                        border-radius: 5px;
                        margin: 5px 0;
                        border-left: 3px solid #dee2e6;
                    ">
                        {status_icon} <b>{title}</b><br>
                        <small>üìÖ {meeting_date} | üë• {attendance_count}/{total_invited}</small>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π")
        except:
            st.info("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π")
    
    with col2:
        st.markdown("#### ‚≠ê –ù–µ–¥–∞–≤–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")
        try:
            recent_points = points_model.get_all(
                "date_earned >= date('now', '-7 days')",
                order_by="created_at DESC"
            )[:5]
            
            if recent_points:
                for point_record_row in recent_points:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–µ
                    citizen_id = safe_get(point_record_row, 'citizen_id')
                    
                    try:
                        citizen_row = citizen_model.get_by_id(citizen_id) if citizen_id else None
                        citizen_name = safe_get(citizen_row, 'full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') if citizen_row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    except:
                        citizen_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    activity_icons = {
                        'meeting_attendance': 'üèõÔ∏è',
                        'subbotnik': 'üßπ',
                        'community_work': 'ü§ù',
                        'volunteer_work': '‚ù§Ô∏è'
                    }
                    
                    activity_type = safe_get(point_record_row, 'activity_type', '')
                    icon = activity_icons.get(activity_type, '‚≠ê')
                    points = safe_get(point_record_row, 'points', 0)
                    date_earned_str = safe_get(point_record_row, 'date_earned', '')
                    
                    try:
                        date_earned = format_date(date_earned_str) if date_earned_str else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                    except:
                        date_earned = str(date_earned_str)
                    
                    st.markdown(f"""
                    <div style="
                        background: #37535C;
                        padding: 10px;
                        border-radius: 5px;
                        margin: 5px 0;
                        border-left: 3px solid #4CAF50;
                    ">
                        {icon} <b>{citizen_name}</b><br>
                        <small>+{points} –±–∞–ª–ª–æ–≤ | {date_earned}</small>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π")
        except:
            st.info("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π")
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.markdown("---")
    st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞", use_container_width=True):
            st.session_state.quick_action = "add_citizen"
            st.rerun()
    
    with col2:
        if st.button("üìÖ –°–æ–∑–¥–∞—Ç—å –∑–∞—Å–µ–¥–∞–Ω–∏–µ", use_container_width=True):
            st.session_state.quick_action = "create_meeting"
            st.rerun()
    
    with col3:
        if st.button("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS", use_container_width=True):
            st.session_state.quick_action = "send_sms"
            st.rerun()
    
    with col4:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
            st.session_state.quick_action = "export_data"
            st.rerun()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if hasattr(st.session_state, 'quick_action'):
        handle_quick_actions()


def get_attendance_dynamics(meeting_model: MeetingModel) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã
    
    Args:
        meeting_model: –ú–æ–¥–µ–ª—å –∑–∞—Å–µ–¥–∞–Ω–∏–π
        
    Returns:
        –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    end_date = date.today()
    start_date = end_date - timedelta(days=180)
    
    query = """
        SELECT 
            strftime('%Y-%m', meeting_date) as month,
            AVG(CASE WHEN total_invited > 0 
                THEN (attendance_count * 100.0 / total_invited) 
                ELSE 0 END) as attendance_rate,
            COUNT(*) as meetings_count
        FROM meetings 
        WHERE meeting_date BETWEEN ? AND ?
        AND status = 'COMPLETED'
        GROUP BY strftime('%Y-%m', meeting_date)
        ORDER BY month
    """
    
    try:
        result = meeting_model.db.execute_query(
            query, 
            (start_date.isoformat(), end_date.isoformat())
        )
        
        if result:
            data = []
            for row in result:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—è—Ü –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                month_str = safe_get(row, 'month', '')
                try:
                    month_date = datetime.strptime(month_str, '%Y-%m')
                    month_name = month_date.strftime('%b %Y')
                except:
                    month_name = month_str
                
                data.append({
                    'month': month_name,
                    'attendance_rate': round(safe_get(row, 'attendance_rate', 0), 1),
                    'meetings_count': safe_get(row, 'meetings_count', 0)
                })
            
            return data
    except:
        pass
    
    return []


def get_meeting_statistics(meeting_model: MeetingModel) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—Å–µ–¥–∞–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    
    Args:
        meeting_model: –ú–æ–¥–µ–ª—å –∑–∞—Å–µ–¥–∞–Ω–∏–π
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    query = """
        SELECT status, COUNT(*) as count
        FROM meetings
        WHERE meeting_date >= date('now', '-365 days')
        GROUP BY status
    """
    
    try:
        result = meeting_model.db.execute_query(query)
        
        if result:
            stats = {}
            for row in result:
                status = safe_get(row, 'status', 'UNKNOWN')
                count = safe_get(row, 'count', 0)
                stats[status] = count
            return stats
    except:
        pass
    
    return {}


def handle_quick_actions():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    action = st.session_state.quick_action
    
    if action == "add_citizen":
        st.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
    elif action == "create_meeting":
        st.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è...")
        
    elif action == "send_sms":
        st.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É SMS-—Ä–∞—Å—Å—ã–ª–∫–∏...")
        
    elif action == "export_data":
        st.info("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if hasattr(st.session_state, 'quick_action'):
        del st.session_state.quick_action


def show_system_info():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    
    with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"):
        st.markdown("""
        ### üèõÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ö–∞–ª–ª–∏
        
        **–í–µ—Ä—Å–∏—è:** 1.0.0  
        **–î–∞—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** 2024  
        **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** Python, Streamlit, SQLite
        
        **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:**
        - üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–º –≥—Ä–∞–∂–¥–∞–Ω
        - üèõÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞—Å–µ–¥–∞–Ω–∏–π
        - üì± SMS-—Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        - ‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        - ‚≠ê –°–∏—Å—Ç–µ–º–∞ –ø–æ–æ—â—Ä–µ–Ω–∏–π –∏ –±–∞–ª–ª–æ–≤
        - üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        
        **–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:**  
        üìß support@mahalla-system.uz  
        üìû +998 (71) 123-45-67
        """)


# CSS —Å—Ç–∏–ª–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
def apply_dashboard_styles():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    st.markdown("""
    <style>
        /* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
        [data-testid="metric-container"] {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        [data-testid="metric-container"] label {
            color: white !important;
        }
        
        [data-testid="metric-container"] [data-testid="metric-value"] {
            color: white !important;
            font-size: 2rem !important;
            font-weight: bold !important;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
        .metric-container {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏–π */
        .event-card {
            background: #37535C;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            border-left: 4px solid #2196F3;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */
        .stButton > button {
            background: linear-gradient(45deg, #2196F3, #21CBF3);
            color: white;
            border: none;
            border-radius: 25px;
            padding: 10px 20px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .stButton > button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
    </style>
    """, unsafe_allow_html=True)


# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
apply_dashboard_styles()