"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤ –∏ –ø–æ–æ—â—Ä–µ–Ω–∏–π
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any

from config.database import DatabaseManager
from models.points import PointsModel
from models.citizen import CitizenModel
from models.meeting import MeetingModel
from utils.helpers import (
    format_date, format_datetime, Paginator,
    create_excel_download_button, show_success_message, show_error_message
)
from utils.auth import get_current_user_id, has_permission

def show_points_page():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
    
    st.markdown("# ‚≠ê –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤ –∏ –ø–æ–æ—â—Ä–µ–Ω–∏–π")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission('points'):
        st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    db = DatabaseManager()
    points_model = PointsModel(db)
    citizen_model = CitizenModel(db)
    meeting_model = MeetingModel(db)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    with st.sidebar:
        st.markdown("### üîß –î–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üèÜ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", use_container_width=True):
            st.session_state.points_action = "award"
        
        if st.button("üìä –†–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–∂–¥–∞–Ω", use_container_width=True):
            st.session_state.points_action = "leaderboard"
        
        if st.button("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            st.session_state.points_action = "stats"
        
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–ª–ª–æ–≤", use_container_width=True):
            st.session_state.points_action = "settings"
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –°–≤–æ–¥–∫–∞")
        
        quick_stats = get_quick_points_stats(points_model, citizen_model)
        
        st.metric("üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω", quick_stats.get('active_citizens', 0))
        st.metric("‚≠ê –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤", quick_stats.get('total_points', 0))
        st.metric("üìÖ –ó–∞ –º–µ—Å—è—Ü", quick_stats.get('monthly_activities', 0))
        
        # –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        st.markdown("---")
        st.markdown("### üí° –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤")
        
        points_config = {
            "üèõÔ∏è –ó–∞—Å–µ–¥–∞–Ω–∏–µ": "10 –±–∞–ª–ª–æ–≤",
            "üßπ –°—É–±–±–æ—Ç–Ω–∏–∫": "15 –±–∞–ª–ª–æ–≤", 
            "ü§ù –û–±—â. —Ä–∞–±–æ—Ç–∞": "10 –±–∞–ª–ª–æ–≤",
            "‚ù§Ô∏è –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ": "12 –±–∞–ª–ª–æ–≤"
        }
        
        for activity, points in points_config.items():
            st.caption(f"{activity}: **{points}**")
        
        st.info("üí´ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: +50%")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    action = st.session_state.get('points_action', 'main')
    
    if action == "award":
        show_award_points_form(points_model, citizen_model, meeting_model)
    elif action == "leaderboard":
        show_leaderboard(points_model)
    elif action == "stats":
        show_points_statistics(points_model)
    elif action == "settings":
        show_points_settings(points_model)
    elif action == "citizen_details":
        citizen_id = st.session_state.get('citizen_details_id')
        if citizen_id:
            show_citizen_points_details(points_model, citizen_model, citizen_id)
        else:
            st.error("ID –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            st.session_state.points_action = "main"
    else:
        show_points_main(points_model, citizen_model)


def show_points_main(points_model: PointsModel, citizen_model: CitizenModel):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
    
    st.markdown("### üèÜ –°–∏—Å—Ç–µ–º–∞ –ø–æ–æ—â—Ä–µ–Ω–∏–π")
    
    # –¢–æ–ø –≥—Ä–∞–∂–¥–∞–Ω
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("#### üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
        
        top_citizens = points_model.get_leaderboard(limit=10)
        
        if top_citizens:
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø–∞
            for i, citizen in enumerate(top_citizens, 1):
                points = citizen.get('total_points', citizen.get('period_points', 0))
                activities = citizen.get('activities_count', 0)
                
                # –ú–µ–¥–∞–ª–∏ –¥–ª—è —Ç–æ–ø-3
                if i == 1:
                    medal = "ü•á"
                    color = "#FFD700"
                elif i == 2:
                    medal = "ü•à" 
                    color = "#C0C0C0"
                elif i == 3:
                    medal = "ü•â"
                    color = "#CD7F32"
                else:
                    medal = f"{i}."
                    color = "#f8f9fa"
                
                with st.container():
                    st.markdown(f"""
                    <div style="
                        background: linear-gradient(45deg, {color}20, {color}10);
                        border-left: 4px solid {color};
                        padding: 15px;
                        border-radius: 8px;
                        margin: 8px 0;
                        display: flex;
                        align-items: center;
                    ">
                        <div style="font-size: 24px; margin-right: 15px;">{medal}</div>
                        <div style="flex-grow: 1;">
                            <b>{citizen['full_name']}</b><br>
                            <small>üèÜ {points} –±–∞–ª–ª–æ–≤ | üìä {activities} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</small>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    col_view, col_award = st.columns([1, 1])
                    
                    with col_view:
                        if st.button("üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"view_{citizen['id']}"):
                            st.session_state.points_action = "citizen_details"
                            st.session_state.citizen_details_id = citizen['id']
                            st.rerun()
                    
                    with col_award:
                        if st.button("üèÜ –ù–∞—á–∏—Å–ª–∏—Ç—å", key=f"award_{citizen['id']}"):
                            st.session_state.points_action = "award"
                            st.session_state.selected_citizen_id = citizen['id']
                            st.rerun()
        else:
            st.info("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω —Å –±–∞–ª–ª–∞–º–∏")
    
    with col2:
        st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        monthly_stats = points_model.get_activity_statistics(30)
        
        if monthly_stats['by_activity_type']:
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º
            activity_data = monthly_stats['by_activity_type']
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
            activity_names = {
                'meeting_attendance': '–ó–∞—Å–µ–¥–∞–Ω–∏—è',
                'subbotnik': '–°—É–±–±–æ—Ç–Ω–∏–∫–∏',
                'community_work': '–û–±—â. —Ä–∞–±–æ—Ç—ã',
                'volunteer_work': '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ',
                'initiative': '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã'
            }
            
            df_activity = pd.DataFrame(activity_data)
            df_activity['display_name'] = df_activity['activity_type'].map(
                lambda x: activity_names.get(x, x)
            )
            
            fig = px.pie(
                df_activity,
                values='total_points',
                names='display_name',
                title="–ë–∞–ª–ª—ã –ø–æ –≤–∏–¥–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )
            
            fig.update_traces(
                textposition='inside',
                textinfo='percent+label',
                hovertemplate='<b>%{label}</b><br>–ë–∞–ª–ª—ã: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü
        totals = monthly_stats.get('totals', {})
        
        st.metric("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", totals.get('total_activities', 0))
        st.metric("‚≠ê –ë–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ", totals.get('total_points_awarded', 0))
        st.metric("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω", totals.get('active_citizens_count', 0))
    
    st.markdown("---")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    st.markdown("#### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")
    
    recent_awards = get_recent_point_awards(points_model)
    
    if recent_awards:
        for award in recent_awards[:10]:
            show_point_award_card(award)
    else:
        st.info("üì≠ –ù–µ–¥–∞–≤–Ω–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ—Ç")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –±–∞–ª–ª–∞–º
    st.markdown("---")
    st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –±–∞–ª–ª–∞–º")
    
    distribution = points_model.get_points_distribution()
    
    if distribution:
        col1, col2 = st.columns([1, 1])
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            fig = px.bar(
                x=list(distribution.keys()),
                y=list(distribution.values()),
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –±–∞–ª–ª–æ–≤",
                labels={'x': '–î–∏–∞–ø–∞–∑–æ–Ω –±–∞–ª–ª–æ–≤', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–∂–¥–∞–Ω'}
            )
            
            fig.update_layout(
                showlegend=False,
                xaxis_tickangle=-45
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
            df_dist = pd.DataFrame([
                {"–î–∏–∞–ø–∞–∑–æ–Ω": k, "–ì—Ä–∞–∂–¥–∞–Ω": v, "–ü—Ä–æ—Ü–µ–Ω—Ç": f"{v/sum(distribution.values())*100:.1f}%"}
                for k, v in distribution.items()
            ])
            
            st.dataframe(
                df_dist,
                use_container_width=True,
                hide_index=True
            )
    else:
        st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")


def show_award_points_form(points_model: PointsModel, citizen_model: CitizenModel, meeting_model: MeetingModel):
    """–§–æ—Ä–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    
    st.markdown("### üèÜ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.points_action = "main"
            st.rerun()
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    award_type = st.radio(
        "–¢–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:",
        ["üë§ –û–¥–Ω–æ–º—É –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω—É", "üë• –ì—Ä—É–ø–ø–µ –≥—Ä–∞–∂–¥–∞–Ω", "üèõÔ∏è –ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞—Å–µ–¥–∞–Ω–∏–∏"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"
    )
    
    if award_type == "üë§ –û–¥–Ω–æ–º—É –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω—É":
        show_single_citizen_award_form(points_model, citizen_model)
    elif award_type == "üë• –ì—Ä—É–ø–ø–µ –≥—Ä–∞–∂–¥–∞–Ω":
        show_bulk_award_form(points_model, citizen_model)
    elif award_type == "üèõÔ∏è –ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞—Å–µ–¥–∞–Ω–∏–∏":
        show_meeting_award_form(points_model, citizen_model, meeting_model)


def show_single_citizen_award_form(points_model: PointsModel, citizen_model: CitizenModel):
    """–§–æ—Ä–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –æ–¥–Ω–æ–º—É –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω—É"""
    
    with st.form("single_award_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # –í—ã–±–æ—Ä –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
            citizens = citizen_model.get_active_citizens()
            citizen_options = {c['id']: c['full_name'] for c in citizens}
            
            selected_citizen_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ *",
                options=list(citizen_options.keys()),
                format_func=lambda x: citizen_options[x],
                index=0 if citizen_options else None,
                help="–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã
            if selected_citizen_id:
                citizen = citizen_model.get_by_id(selected_citizen_id)
                if citizen:
                    current_points = citizen['total_points'] or 0
                    st.info(f"üí∞ –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: **{current_points}**")
            
            # –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_types = points_model.get_activity_types()
            
            if activity_types:
                activity_options = {at['name']: at['display_name'] for at in activity_types}
                
                selected_activity = st.selectbox(
                    "–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ *",
                    options=list(activity_options.keys()),
                    format_func=lambda x: activity_options[x],
                    help="–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
                selected_activity_type = next((at for at in activity_types if at['name'] == selected_activity), None)
                if selected_activity_type:
                    default_points = selected_activity_type['points_value']
                    st.caption(f"üí° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ: {default_points} –±–∞–ª–ª–æ–≤")
            else:
                st.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                return
        
        with col2:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
            use_custom_points = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤")
            
            if use_custom_points:
                custom_points = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ *",
                    min_value=-1000,
                    max_value=1000,
                    value=default_points if 'default_points' in locals() else 10,
                    help="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"
                )
                points_to_award = custom_points
            else:
                points_to_award = default_points if 'default_points' in locals() else 10
                st.info(f"üèÜ –ë—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ: **{points_to_award} –±–∞–ª–ª–æ–≤**")
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏",
                height=100,
                help="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –±–∞–ª–ª–æ–≤"
            )
            
            # –°–≤—è–∑—å —Å –∑–∞—Å–µ–¥–∞–Ω–∏–µ–º
            recent_meetings = MeetingModel.get_all(
                "meeting_date >= date('now', '-30 days')",
                order_by="meeting_date DESC"
            )
            
            if recent_meetings:
                meeting_options = {None: "–ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞—Å–µ–¥–∞–Ω–∏–µ–º"}
                meeting_options.update({
                    m['id']: f"{m['title']} ({format_date(m['meeting_date'])})"
                    for m in recent_meetings
                })
                
                linked_meeting = st.selectbox(
                    "–°–≤—è–∑–∞–Ω–Ω–æ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ",
                    options=list(meeting_options.keys()),
                    format_func=lambda x: meeting_options[x],
                    help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞—Å–µ–¥–∞–Ω–∏–µ, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã"
                )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button(
            f"üèÜ –ù–∞—á–∏—Å–ª–∏—Ç—å {points_to_award} –±–∞–ª–ª–æ–≤",
            use_container_width=True,
            type="primary"
        )
        
        if submitted:
            if not selected_citizen_id or not selected_activity:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
            point_id = points_model.award_points(
                citizen_id=selected_citizen_id,
                activity_type=selected_activity,
                description=description.strip() if description else "",
                meeting_id=linked_meeting,
                custom_points=points_to_award if use_custom_points else None,
                created_by=get_current_user_id()
            )
            
            if point_id:
                citizen_name = citizen_options[selected_citizen_id]
                show_success_message(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points_to_award} –±–∞–ª–ª–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω—É {citizen_name}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–ª—ã
                updated_citizen = citizen_model.get_by_id(selected_citizen_id)
                if updated_citizen:
                    new_total = updated_citizen['total_points'] or 0
                    st.success(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **{new_total} –±–∞–ª–ª–æ–≤**")
                
                st.session_state.points_action = "main"
                st.rerun()
            else:
                show_error_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")


def show_bulk_award_form(points_model: PointsModel, citizen_model: CitizenModel):
    """–§–æ—Ä–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    
    st.markdown("#### üë• –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤")
    
    with st.form("bulk_award_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ –≥—Ä–∞–∂–¥–∞–Ω
            selection_criteria = st.selectbox(
                "–ö–æ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã:",
                ["–í—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º", "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ", "–° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤"],
                help="–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ç–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"
            )
            
            if selection_criteria == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ":
                age_group = st.selectbox(
                    "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:",
                    ["18-30 –ª–µ—Ç", "31-50 –ª–µ—Ç", "51-70 –ª–µ—Ç", "70+ –ª–µ—Ç"]
                )
            elif selection_criteria == "–° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤":
                points_range = st.selectbox(
                    "–î–∏–∞–ø–∞–∑–æ–Ω –±–∞–ª–ª–æ–≤:",
                    ["0 –±–∞–ª–ª–æ–≤", "1-50 –±–∞–ª–ª–æ–≤", "51-100 –±–∞–ª–ª–æ–≤", "100+ –±–∞–ª–ª–æ–≤"]
                )
            
            # –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_types = points_model.get_activity_types()
            if activity_types:
                activity_options = {at['name']: at['display_name'] for at in activity_types}
                
                selected_activity = st.selectbox(
                    "–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ *",
                    options=list(activity_options.keys()),
                    format_func=lambda x: activity_options[x]
                )
                
                selected_activity_type = next((at for at in activity_types if at['name'] == selected_activity), None)
                if selected_activity_type:
                    default_points = selected_activity_type['points_value']
        
        with col2:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
            points_to_award = st.number_input(
                "–ë–∞–ª–ª—ã –∫–∞–∂–¥–æ–º—É *",
                min_value=1,
                max_value=1000,
                value=default_points if 'default_points' in locals() else 10,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
            )
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è *",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—á–∞—Å—Ç–∏–µ –≤ –æ–±—â–µ–≥–æ—Ä–æ–¥—Å–∫–æ–º —Å—É–±–±–æ—Ç–Ω–∏–∫–µ",
                height=100
            )
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipient_count = get_bulk_recipients_count(citizen_model, selection_criteria)
            st.metric("üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", recipient_count)
            st.metric("‚≠ê –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤", recipient_count * points_to_award)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button(
            f"üèÜ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã {recipient_count} –≥—Ä–∞–∂–¥–∞–Ω–∞–º",
            use_container_width=True,
            type="primary"
        )
        
        if submitted:
            if not selected_activity or not description.strip():
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = get_bulk_recipients_list(citizen_model, selection_criteria)
            
            if not recipients:
                st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            awards_data = []
            for recipient in recipients:
                awards_data.append({
                    'citizen_id': recipient['id'],
                    'activity_type': selected_activity,
                    'description': description.strip(),
                    'custom_points': points_to_award,
                    'created_by': get_current_user_id()
                })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
            result = points_model.bulk_award_points(awards_data)
            
            if result['successful'] > 0:
                show_success_message(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: {result['successful']} –≥—Ä–∞–∂–¥–∞–Ω–∞–º. "
                    f"–û—à–∏–±–æ–∫: {result['failed']}"
                )
                st.session_state.points_action = "main"
                st.rerun()
            else:
                show_error_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
                if result['errors']:
                    for error in result['errors'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        st.error(error)


def show_meeting_award_form(points_model: PointsModel, citizen_model: CitizenModel, meeting_model: MeetingModel):
    """–§–æ—Ä–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞—Å–µ–¥–∞–Ω–∏–∏"""
    
    st.markdown("#### üèõÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞—Å–µ–¥–∞–Ω–∏–∏")
    
    # –í—ã–±–æ—Ä –∑–∞—Å–µ–¥–∞–Ω–∏—è
    recent_meetings = meeting_model.get_all(
        "meeting_date >= date('now', '-90 days') AND status = 'COMPLETED'",
        order_by="meeting_date DESC"
    )
    
    if not recent_meetings:
        st.warning("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞")
        return
    
    meeting_options = {
        m['id']: f"{m['title']} ({format_date(m['meeting_date'])})"
        for m in recent_meetings
    }
    
    selected_meeting_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ:",
        options=list(meeting_options.keys()),
        format_func=lambda x: meeting_options[x],
        help="–ó–∞—Å–µ–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"
    )
    
    if selected_meeting_id:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        meeting_data = meeting_model.get_meeting_with_attendance(selected_meeting_id)
        
        if meeting_data:
            meeting = meeting_data['meeting']
            attendance_list = meeting_data['attendance']
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", len(attendance_list))
            
            with col2:
                present_count = sum(1 for a in attendance_list if a['is_present'])
                st.metric("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏", present_count)
            
            with col3:
                already_awarded = sum(1 for a in attendance_list if a['points_earned'])
                st.metric("üèÜ –£–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ", already_awarded)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            col1, col2 = st.columns(2)
            
            with col1:
                points_per_participant = st.number_input(
                    "–ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ:",
                    min_value=1,
                    max_value=100,
                    value=10,
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"
                )
                
                award_mode = st.radio(
                    "–ö–æ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—å:",
                    ["–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º", "–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", "–¢–æ–ª—å–∫–æ –±–µ–∑ –±–∞–ª–ª–æ–≤"],
                    help="–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"
                )
            
            with col2:
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                if award_mode == "–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º":
                    eligible_count = sum(1 for a in attendance_list if a['is_present'] and not a['points_earned'])
                elif award_mode == "–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º":
                    eligible_count = sum(1 for a in attendance_list if not a['points_earned'])
                else:  # –¢–æ–ª—å–∫–æ –±–µ–∑ –±–∞–ª–ª–æ–≤
                    eligible_count = sum(1 for a in attendance_list if not a['points_earned'])
                
                st.metric("üë• –ü–æ–ª—É—á–∞—Ç –±–∞–ª–ª—ã", eligible_count)
                st.metric("‚≠ê –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤", eligible_count * points_per_participant)
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            if st.button(
                f"üèÜ –ù–∞—á–∏—Å–ª–∏—Ç—å {points_per_participant} –±–∞–ª–ª–æ–≤ {eligible_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
                use_container_width=True,
                type="primary"
            ):
                if eligible_count == 0:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")
                    return
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –Ω–∞—á–∏—Å–ª—è—Ç—å
                attendance_data = {}
                for attendance in attendance_list:
                    citizen_id = attendance['citizen_id']
                    
                    should_award = False
                    if award_mode == "–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º":
                        should_award = attendance['is_present'] and not attendance['points_earned']
                    elif award_mode == "–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º":
                        should_award = not attendance['points_earned']
                    else:  # –¢–æ–ª—å–∫–æ –±–µ–∑ –±–∞–ª–ª–æ–≤
                        should_award = not attendance['points_earned']
                    
                    if should_award:
                        attendance_data[citizen_id] = True
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
                awarded_count = points_model.award_meeting_attendance_points(
                    selected_meeting_id, 
                    attendance_data
                )
                
                if awarded_count > 0:
                    show_success_message(f"‚úÖ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã {awarded_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞—Å–µ–¥–∞–Ω–∏—è")
                    st.rerun()
                else:
                    show_error_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")


def show_leaderboard(points_model: PointsModel):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä–∞–∂–¥–∞–Ω"""
    
    st.markdown("### üèÜ –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.points_action = "main"
            st.rerun()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞:",
            ["–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", "–ó–∞ –≥–æ–¥", "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª", "–ó–∞ –º–µ—Å—è—Ü"],
            help="–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤"
        )
    
    with col2:
        limit = st.selectbox(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:",
            [10, 20, 50, 100],
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–∂–¥–∞–Ω –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"
        )
    
    with col3:
        export_format = st.selectbox(
            "–≠–∫—Å–ø–æ—Ä—Ç:",
            ["–ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", "Excel", "CSV"]
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    period_days = None
    if period == "–ó–∞ –º–µ—Å—è—Ü":
        period_days = 30
    elif period == "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª":
        period_days = 90
    elif period == "–ó–∞ –≥–æ–¥":
        period_days = 365
    
    leaderboard = points_model.get_leaderboard(limit=limit, period_days=period_days)
    
    if leaderboard:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        st.success(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ {period.lower()}: {len(leaderboard)} –≥—Ä–∞–∂–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df_leaderboard = pd.DataFrame([dict(citizen) for citizen in leaderboard])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        df_leaderboard['position'] = range(1, len(df_leaderboard) + 1)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        column_config = {
            "position": st.column_config.NumberColumn("üèÜ –ú–µ—Å—Ç–æ", width="small"),
            "full_name": st.column_config.TextColumn("–§–ò–û", width="medium"),
            "total_points": st.column_config.NumberColumn("‚≠ê –ë–∞–ª–ª—ã", width="small") if period_days is None else None,
            "period_points": st.column_config.NumberColumn("‚≠ê –ë–∞–ª–ª—ã", width="small") if period_days else None,
            "activities_count": st.column_config.NumberColumn("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", width="small"),
            "phone": st.column_config.TextColumn("üìû –¢–µ–ª–µ—Ñ–æ–Ω", width="medium"),
            "address": st.column_config.TextColumn("üìç –ê–¥—Ä–µ—Å", width="large")
        }
        
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        column_config = {k: v for k, v in column_config.items() if v is not None}
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df_leaderboard[list(column_config.keys())],
            column_config=column_config,
            use_container_width=True,
            hide_index=True
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        if export_format != "–ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å":
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"—Ä–µ–π—Ç–∏–Ω–≥_–≥—Ä–∞–∂–¥–∞–Ω_{timestamp}"
            
            if export_format == "Excel":
                create_excel_download_button(
                    df_leaderboard[list(column_config.keys())],
                    f"{filename}.xlsx",
                    "üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (Excel)"
                )
            else:  # CSV
                csv_data = df_leaderboard[list(column_config.keys())].to_csv(index=False, encoding='utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (CSV)",
                    data=csv_data,
                    file_name=f"{filename}.csv",
                    mime="text/csv"
                )
    else:
        st.info("üèÜ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞")


def show_points_statistics(points_model: PointsModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
    
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.points_action = "main"
            st.rerun()
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    period = st.selectbox(
        "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
        [30, 90, 180, 365],
        format_func=lambda x: f"–ó–∞ {x} –¥–Ω–µ–π",
        index=1
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = points_model.get_activity_statistics(period)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    totals = stats.get('totals', {})
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", totals.get('total_activities', 0))
    
    with col2:
        st.metric("‚≠ê –ë–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ", totals.get('total_points_awarded', 0))
    
    with col3:
        st.metric("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω", totals.get('active_citizens_count', 0))
    
    with col4:
        avg_points = totals.get('avg_points_per_activity', 0)
        st.metric("üìà –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã", f"{avg_points:.1f}" if avg_points else "0")
    
    st.markdown("---")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º
        activity_data = stats.get('by_activity_type', [])
        if activity_data:
            st.markdown("#### üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º")
            
            df_activity = pd.DataFrame(activity_data)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è
            activity_names = {
                'meeting_attendance': '–ó–∞—Å–µ–¥–∞–Ω–∏—è',
                'subbotnik': '–°—É–±–±–æ—Ç–Ω–∏–∫–∏',
                'community_work': '–û–±—â. —Ä–∞–±–æ—Ç—ã',
                'volunteer_work': '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ',
                'initiative': '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã'
            }
            
            df_activity['display_name'] = df_activity['activity_type'].map(
                lambda x: activity_names.get(x, x)
            )
            
            fig = px.bar(
                df_activity,
                x='display_name',
                y='total_points',
                title="–ë–∞–ª–ª—ã –ø–æ –≤–∏–¥–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                labels={'display_name': '–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'total_points': '–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤'}
            )
            
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    with col2:
        # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º
        daily_data = stats.get('daily_breakdown', [])
        if daily_data:
            st.markdown("#### üìà –î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            
            df_daily = pd.DataFrame(daily_data)
            df_daily['date_earned'] = pd.to_datetime(df_daily['date_earned'])
            
            fig = px.line(
                df_daily,
                x='date_earned',
                y='points_awarded',
                title="–ë–∞–ª–ª—ã –ø–æ –¥–Ω—è–º",
                labels={'date_earned': '–î–∞—Ç–∞', 'points_awarded': '–ë–∞–ª–ª—ã'},
                markers=True
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º")
    
    # –ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞
    st.markdown("---")
    st.markdown("#### üìã –ú–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞")
    
    current_date = datetime.now()
    monthly_summary = points_model.get_monthly_summary(current_date.year, current_date.month)
    
    if monthly_summary['top_citizens']:
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üèÜ –¢–æ–ø –≥—Ä–∞–∂–¥–∞–Ω –º–µ—Å—è—Ü–∞:**")
            
            for i, citizen in enumerate(monthly_summary['top_citizens'][:5], 1):
                st.markdown(f"{i}. **{citizen['full_name']}** - {citizen['month_points']} –±–∞–ª–ª–æ–≤")
        
        with col2:
            st.markdown("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞:**")
            
            month_totals = monthly_summary.get('totals', {})
            st.write(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {month_totals.get('total_activities', 0)}")
            st.write(f"‚Ä¢ –ë–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {month_totals.get('total_points', 0)}")
            st.write(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω: {month_totals.get('active_citizens', 0)}")
    else:
        st.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")


def show_points_settings(points_model: PointsModel):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
    
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤")
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.points_action = "main"
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_types = points_model.get_activity_types()
    
    st.markdown("#### üìã –¢–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –±–∞–ª–ª—ã")
    
    if activity_types:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for activity_type in activity_types:
            with st.expander(f"üìå {activity_type['display_name']}"):
                col1, col2, col3 = st.columns([2, 1, 1])
                
                with col1:
                    st.write(f"**–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è:** {activity_type['name']}")
                    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {activity_type['description']}")
                
                with col2:
                    st.metric("–ë–∞–ª–ª—ã", activity_type['points_value'])
                
                with col3:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if activity_type['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {status}")
    else:
        st.info("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    st.markdown("---")
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.markdown("#### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    with st.form("add_activity_type_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            display_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ *",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",
                help="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )
            
            name = st.text_input(
                "–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è *",
                placeholder="event_participation",
                help="–ò–º—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)"
            )
        
        with col2:
            points_value = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ *",
                min_value=1,
                max_value=1000,
                value=10,
                help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )
            
            description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ",
                placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                help="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
            )
        
        submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", use_container_width=True)
        
        if submitted:
            if not display_name.strip() or not name.strip():
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activity_id = points_model.create_activity_type(
                    name=name.strip().lower(),
                    display_name=display_name.strip(),
                    points_value=points_value,
                    description=description.strip()
                )
                
                if activity_id:
                    show_success_message(f"‚úÖ –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ '{display_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    show_error_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")


def show_citizen_points_details(points_model: PointsModel, citizen_model: CitizenModel, citizen_id: int):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–ª–∞—Ö –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"""
    
    st.markdown("### üë§ –î–µ—Ç–∞–ª–∏ –ø–æ –±–∞–ª–ª–∞–º –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
    citizen = citizen_model.get_by_id(citizen_id)
    if not citizen:
        st.error("–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.session_state.points_action = "main"
        return
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.points_action = "main"
            st.rerun()
    
    with col2:
        st.info(f"–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω: {citizen['full_name']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    achievements = points_model.get_citizen_achievements(citizen_id)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2, col3, col4 = st.columns(4)
    
    total_stats = achievements.get('total_stats', {})
    
    with col1:
        st.metric("‚≠ê –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤", total_stats.get('total_points', 0))
    
    with col2:
        st.metric("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", total_stats.get('total_activities', 0))
    
    with col3:
        rank = achievements.get('rank')
        st.metric("üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ", rank if rank else "–ù/–î")
    
    with col4:
        first_activity = total_stats.get('first_activity')
        if first_activity:
            st.metric("üìÖ –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", format_date(first_activity, 'short'))
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements_list = achievements.get('achievements', [])
    if achievements_list:
        st.markdown("#### üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        
        cols = st.columns(len(achievements_list))
        for i, achievement in enumerate(achievements_list):
            with cols[i % len(cols)]:
                st.markdown(f"""
                <div style="
                    background: linear-gradient(45deg, #FFD700, #FFA500);
                    color: white;
                    padding: 15px;
                    border-radius: 10px;
                    text-align: center;
                    margin: 5px;
                ">
                    <h4>{achievement['name']}</h4>
                    <small>{achievement['description']}</small>
                </div>
                """, unsafe_allow_html=True)
    
    # –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.markdown("---")
    st.markdown("#### üìã –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_breakdown = achievements.get('activity_breakdown', [])
    if activity_breakdown:
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            df_breakdown = pd.DataFrame(activity_breakdown)
            
            activity_names = {
                'meeting_attendance': '–ó–∞—Å–µ–¥–∞–Ω–∏—è',
                'subbotnik': '–°—É–±–±–æ—Ç–Ω–∏–∫–∏',
                'community_work': '–û–±—â. —Ä–∞–±–æ—Ç—ã',
                'volunteer_work': '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ',
                'initiative': '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã'
            }
            
            df_breakdown['display_name'] = df_breakdown['activity_type'].map(
                lambda x: activity_names.get(x, x)
            )
            
            fig = px.pie(
                df_breakdown,
                values='points',
                names='display_name',
                title="–ë–∞–ª–ª—ã –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π
            st.markdown("**üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**")
            
            for activity in activity_breakdown:
                activity_name = activity_names.get(activity['activity_type'], activity['activity_type'])
                st.markdown(f"‚Ä¢ **{activity_name}**: {activity['count']} —Ä–∞–∑, {activity['points']} –±–∞–ª–ª–æ–≤")
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
    st.markdown("#### üìù –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π")
    
    points_history = points_model.get_citizen_points_history(citizen_id, limit=50)
    
    if points_history:
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2 = st.columns(2)
        
        with col1:
            activity_filter = st.selectbox(
                "–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                ["–í—Å–µ"] + list(set(h['activity_type'] for h in points_history))
            )
        
        with col2:
            period_filter = st.selectbox(
                "–ü–µ—Ä–∏–æ–¥:",
                ["–í—Å–µ –≤—Ä–µ–º—è", "–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª", "–ó–∞ –≥–æ–¥"]
            )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        filtered_history = filter_points_history(points_history, activity_filter, period_filter)
        
        if filtered_history:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            for record in filtered_history:
                show_point_record_card(record)
        else:
            st.info("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_quick_points_stats(points_model: PointsModel, citizen_model: CitizenModel) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ —Å –±–∞–ª–ª–∞–º–∏
    active_citizens = citizen_model.count("is_active = 1 AND total_points > 0")
    
    # –û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤
    total_points_query = "SELECT COALESCE(SUM(total_points), 0) as total FROM citizens WHERE is_active = 1"
    total_result = citizen_model.db.execute_query(total_points_query)
    total_points = total_result[0]['total'] if total_result else 0
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü
    monthly_activities = points_model.count("date_earned >= date('now', '-30 days')")
    
    return {
        'active_citizens': active_citizens,
        'total_points': total_points,
        'monthly_activities': monthly_activities
    }


def get_recent_point_awards(points_model: PointsModel, limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –±–∞–ª–ª–æ–≤"""
    
    query = """
        SELECT 
            cp.*,
            c.full_name,
            m.title as meeting_title
        FROM citizen_points cp
        JOIN citizens c ON cp.citizen_id = c.id
        LEFT JOIN meetings m ON cp.meeting_id = m.id
        ORDER BY cp.created_at DESC
        LIMIT ?
    """
    
    result = points_model.db.execute_query(query, (limit,))
    return [dict(row) for row in result] if result else []


def show_point_award_card(award: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    
    activity_icons = {
        'meeting_attendance': 'üèõÔ∏è',
        'subbotnik': 'üßπ',
        'community_work': 'ü§ù',
        'volunteer_work': '‚ù§Ô∏è',
        'initiative': 'üí°'
    }
    
    icon = activity_icons.get(award['activity_type'], '‚≠ê')
    points = award['points']
    
    color = "green" if points > 0 else "red"
    
    with st.container():
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"{icon} **{award['full_name']}**")
            
            if award['description']:
                st.caption(f"üìù {award['description']}")
            
            if award['meeting_title']:
                st.caption(f"üèõÔ∏è {award['meeting_title']}")
        
        with col2:
            st.markdown(f"""
            <div style="
                color: {color};
                font-size: 18px;
                font-weight: bold;
                text-align: center;
            ">
                {'+' if points > 0 else ''}{points} –±–∞–ª–ª–æ–≤
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.caption(format_datetime(award['created_at'], 'short'))
        
        st.markdown("---")


def show_point_record_card(record: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤"""
    
    activity_names = {
        'meeting_attendance': 'üèõÔ∏è –ó–∞—Å–µ–¥–∞–Ω–∏–µ',
        'subbotnik': 'üßπ –°—É–±–±–æ—Ç–Ω–∏–∫',
        'community_work': 'ü§ù –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        'volunteer_work': '‚ù§Ô∏è –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ',
        'initiative': 'üí° –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞'
    }
    
    activity_name = activity_names.get(record['activity_type'], record['activity_type'])
    points = record['points']
    
    with st.expander(f"{activity_name} - {points} –±–∞–ª–ª–æ–≤ ({format_date(record['date_earned'])})"):
        if record['description']:
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {record['description']}")
        
        if record['meeting_title']:
            st.write(f"**–°–≤—è–∑–∞–Ω–Ω–æ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ:** {record['meeting_title']}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**–î–∞—Ç–∞:** {format_date(record['date_earned'])}")
        
        with col2:
            st.write(f"**–ù–∞—á–∏—Å–ª–µ–Ω–æ:** {format_datetime(record['created_at'])}")


def get_bulk_recipients_count(citizen_model: CitizenModel, selection_criteria: str) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"""
    
    if selection_criteria == "–í—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º":
        return citizen_model.count("is_active = 1")
    elif selection_criteria == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ":
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ
        return citizen_model.count("is_active = 1 AND birth_date IS NOT NULL") // 2
    elif selection_criteria == "–° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤":
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ
        return citizen_model.count("is_active = 1") // 3
    else:
        return 0


def get_bulk_recipients_list(citizen_model: CitizenModel, selection_criteria: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"""
    
    if selection_criteria == "–í—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º":
        return citizen_model.get_active_citizens()
    elif selection_criteria == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ":
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –≥—Ä–∞–∂–¥–∞–Ω
        all_citizens = citizen_model.get_active_citizens()
        return all_citizens[:len(all_citizens)//2]
    elif selection_criteria == "–° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤":
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –±–µ—Ä–µ–º –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ
        all_citizens = citizen_model.get_active_citizens()
        return all_citizens[::3]
    else:
        return []


def filter_points_history(history: List[Dict], activity_filter: str, period_filter: str) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π"""
    
    filtered = history
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if activity_filter != "–í—Å–µ":
        filtered = [h for h in filtered if h['activity_type'] == activity_filter]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
    if period_filter != "–í—Å–µ –≤—Ä–µ–º—è":
        from datetime import datetime, timedelta
        
        now = datetime.now()
        
        if period_filter == "–ó–∞ –º–µ—Å—è—Ü":
            cutoff = now - timedelta(days=30)
        elif period_filter == "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª":
            cutoff = now - timedelta(days=90)
        elif period_filter == "–ó–∞ –≥–æ–¥":
            cutoff = now - timedelta(days=365)
        else:
            cutoff = None
        
        if cutoff:
            filtered = [
                h for h in filtered 
                if datetime.fromisoformat(h['created_at'].replace('Z', '+00:00')) >= cutoff
            ]
    
    return filtered